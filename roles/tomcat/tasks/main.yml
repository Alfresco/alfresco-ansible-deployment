---
  # tasks file for base-tomcat  
  - name: "Check if \"{{ binaries_folder }}/tomcat.sh\" file is there"
    stat:
      path: "{{ binaries_folder }}/tomcat.sh"
    register: wrapper

  - name: "Add {{ binaries_folder }}/tomcat.sh"
    template:
        src: tomcat.sh
        dest: "{{ binaries_folder }}/tomcat.sh"
        group: "{{ group_name }}"
        owner: "{{ username }}"
        mode: 'u=rwx,g=rwx,o=rx'
    register: wrapper_created
    when: not wrapper.stat.exists

  - name: Check Tomcat version is installed
    command: "su - {{ username }} -c '{{ binaries_folder }}/tomcat.sh configtest'"
    register: install_check
    environment:
        JAVA_HOME: "{{ java_home }}"
    failed_when: false
    changed_when: install_check.rc != 0
    when: wrapper.stat.exists or wrapper_created

  - name: Check if "{{ tomcat_config }}" dir exists
    stat:
      path: "{{ tomcat_config }}"
    register: tom_dir

  - name: Create dir {{ tomcat_config }}
    file:
      path: "{{ tomcat_config }}"
      state: directory
      group: "{{ group_name }}"
      owner: "{{ username }}"
      mode: '0755'
      recurse: yes
    become_user: root
    when: not tom_dir.stat.exists

  - name: Create webapps dir {{ tomcat_working }}/webapps
    file:
      path: "{{ tomcat_working }}/webapps"
      state: directory
      group: "{{ group_name }}"
      owner: "{{ username }}"
      recurse: yes
      mode: '0755'

  - name: check if "/opt/apache-tomcat-{{ tomcat_version }}/" dir exists
    shell: "ls -l {{ tomcat_config }}/"
    failed_when: false
    changed_when: false
    register: tomcat_dir

  - name: Download Tomcat
    get_url:
      url: "{{ item }}"
      dest: "/opt/apache-tomcat-{{ tomcat_version }}.tar.gz"
    register: download
    until: download is succeeded
    failed_when: false
    loop:
      "{{ tomcat_tgz_urls }}"
    become_user: root
    changed_when: tomcat_dir.rc !=0

  - name: Unarchive a file with extra options
    unarchive:
      src: "/opt/apache-tomcat-{{ tomcat_version }}.tar.gz"
      dest: "/opt/"
      remote_src: yes
    become_user: root
    failed_when: false
    changed_when: tomcat_dir.rc != 0

  - name: Recursively change ownership of "/opt/apache-tomcat-{{ tomcat_version }}/"
    file:
      path: "/opt/apache-tomcat-{{ tomcat_version }}/"
      state: directory
      recurse: yes
      group: "{{ group_name }}"
      owner: "{{ username }}"
      mode: 'o=r,g=rwx'
    changed_when: tomcat_dir.rc != 0

  - name: check if "/opt/apache-tomcat-{{ tomcat_version }}/conf" dir exists
    stat:
      path: "/opt/apache-tomcat-{{ tomcat_version }}/conf"
    register: conf_dir_exists

  - name: Copy files from "/opt/apache-tomcat-{{ tomcat_version }}/conf to {{ tomcat_config }}"
    copy:
      remote_src: True
      src: "/opt/apache-tomcat-{{ tomcat_version }}/conf"
      dest: "{{ tomcat_config }}"
      group: "{{ group_name }}"
      owner: "{{ username }}"
    when: conf_dir_exists.stat.exists
    changed_when: False

  - name: Remove old files /opt/apache-tomcat-{{ tomcat_version }}/conf
    file:
      path: "/opt/apache-tomcat-{{ tomcat_version }}/conf"
      state: absent
    changed_when: False

  - name: check if "/opt/apache-tomcat-{{ tomcat_version }}/temp" dir exists
    stat:
      path: "/opt/apache-tomcat-{{ tomcat_version }}/temp"
    register: temp_dir_exists

  - name: Copy files from "/opt/apache-tomcat-{{ tomcat_version }}/temp to {{ tomcat_working }}"
    copy:
      remote_src: True
      src: "/opt/apache-tomcat-{{ tomcat_version }}/temp"
      dest: "{{ tomcat_working }}"
      group: "{{ group_name }}"
      owner: "{{ username }}"
    when: temp_dir_exists.stat.exists

  - name: check if "/opt/apache-tomcat-{{ tomcat_version }}/temp" dir exists
    stat:
      path: "/opt/apache-tomcat-{{ tomcat_version }}/temp"
    register: work_dir_exists

  - name: Copy files from "/opt/apache-tomcat-{{ tomcat_version }}/work to {{ tomcat_working }}"
    copy:
      remote_src: True
      src: "/opt/apache-tomcat-{{ tomcat_version }}/work"
      dest: "{{ tomcat_working }}/work"
      group: "{{ group_name }}"
      owner: "{{ username }}"
    when: work_dir_exists.stat.exists

  - name: Remove old files "/opt/apache-tomcat-{{ tomcat_version }}/logs"
    file:
      path: "/opt/apache-tomcat-{{ tomcat_version }}/logs"
      state: absent
    changed_when: False

  - name: Remove old files "/opt/apache-tomcat-{{ tomcat_version }}/webapps"
    file:
      path: "/opt/apache-tomcat-{{ tomcat_version }}/webapps"
      state: absent
    changed_when: False

  - name: Add "{{ tomcat_config }}/conf/server.xml"
    template:
        src: server.xml
        dest: "{{ tomcat_config }}/conf/server.xml"
        group: "{{ group_name }}"
        owner: "{{ username }}"
    when: install_check.rc != 0 or tomcat_version not in install_check.stderr

  - name: Create a symbolic link {{ tomcat_config }}/logs
    file:
      src: "{{ logs_folder }}"
      dest: "{{ tomcat_config }}/logs"
      group: "{{ group_name }}"
      owner: "{{ username }}"
      state: link
      force: yes

  - name: Create a symbolic link "{{ tomcat_config }}"/work
    file:
      src: "{{ tomcat_working }}/work"
      dest: "{{ tomcat_config }}/work"
      group: "{{ group_name }}"
      owner: "{{ username }}"
      state: link
      force: yes

  - name: checking for TOMCAT_HOME
    shell: cat /etc/opt/alfresco/setenv.sh | grep TOMCAT_HOME
    register: test_tomcat_home
    failed_when: false
    changed_when: test_tomcat_home.rc != 0

  - name: Add TOMCAT_HOME to setenv script
    lineinfile:
      path: "{{ config_folder }}/setenv.sh"
      line: "export TOMCAT_HOME=/opt/apache-tomcat-{{ tomcat_version }}"
    when: test_tomcat_home.stdout != 0

  - name: Add tomcat.service
    template:
        src: tomcat.service
        dest: /etc/systemd/system/tomcat.service
        owner: root
        group: root
    notify: tomcat-restart
    when: install_check.rc != 0 or tomcat_version not in install_check.stderr

  - name: Ensure tomcat service is started and enabled on boot
    systemd:
      name: tomcat.service
      state: started
      enabled: true
