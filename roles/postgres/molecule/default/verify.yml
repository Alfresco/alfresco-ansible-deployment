
---
- name: postgres Tests
  hosts: all
  become: yes
  become_user: postgres
  vars:
    postgres_major_version: "15"
  tasks:
  - name: Gather service facts
    ansible.builtin.service_facts:
  
  - name: Set PostgreSQL service name based on OS type
    ansible.builtin.set_fact:
      service_name: >-
        {{ 'postgresql' if ansible_os_family != 'RedHat'
          else 'postgresql-' ~ postgres_major_version }}

  - name: Fail if PostgreSQL service is not running or enabled
    ansible.builtin.fail:
      msg: "PostgreSQL service '{{ service_name }}.service' is not running or enabled!"
    when: >
      ansible_facts.services.get(service_name ~ '.service', {}).state != 'running' or
      ansible_facts.services.get(service_name ~ '.service', {}).status != 'enabled'
  
  - name: Check if 'alfresco' database exists
    ansible.builtin.command: psql -U postgres -d alfresco -c 'SELECT 1'

  - name: Check if 'alfresco-sync' database exists
    ansible.builtin.command: psql -U postgres -d alfresco-sync -c 'SELECT 1'

  - name: Verify Alfresco database exists with explicit host
    ansible.builtin.shell: "PGPASSWORD=alfresco psql -h postgres-instance  -U alfresco alfresco -c 'SELECT 1'"

  - name: Verify Alfresco-sync database exists with explicit host
    ansible.builtin.shell: "PGPASSWORD=alfresco psql -h postgres-instance -U alfresco-sync alfresco-sync -c 'SELECT 1'"

  - name: Check if user cannot connect remotely to another database (should fail)
    ansible.builtin.shell: "PGPASSWORD=alfresco psql -h postgres-instance -U alfresco alfresco-sync -c 'SELECT 1'"
    register: remote_access_check   
    failed_when: remote_access_check.rc == 0  # Expect failure

  - name: Check if user can connect locally (should pass)
    ansible.builtin.shell: "PGPASSWORD=alfresco psql -h 127.0.0.1 -U alfresco alfresco-sync -c 'SELECT 1'"

  - name: Ensure user cannot create tables inside alfresco-sync database
    ansible.builtin.shell: "PGPASSWORD=alfresco psql -h 127.0.0.1 -U alfresco alfresco-sync -c 'CREATE TABLE public.films (code char(5));'"
    register: permission_check
    failed_when: "'permission denied for schema public' not in permission_check.stderr"
