---
- name: Include OS specific variables
  include_vars: "{{ item }}"
  loop: "{{ lookup('first_found', os_fallback, errors='ignore', wantlist=True) }}"

- name: Install PostgreSQL RDBMS
  become: true
  block:
    - name: Prepare package manager
      include_tasks: "{{ ansible_pkg_mgr }}_repo.yml"
    
    - name: Install packages
      package:
        name: "{{ postgresql_packages }}"
        state: present
        update_cache: yes

    - name: Initialize the system database
      command:
        cmd: "{{ postgresql_setup_path }} initdb"
        creates: "{{ postgresql_data_path }}/PG_VERSION"
      when: ansible_os_family == 'RedHat'

    - name: Ensure postgresql service is started and enabled on boot
      systemd:
        name: "{{ postgresql_service }}"
        state: started
        enabled: true

- name: Configure PostgreSQL RDBMS
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: yes
  block:
    - name: Configure postgresql to listen on all IP interfaces
      lineinfile:
        path: "{{ postgresql_conf_path }}/postgresql.conf"
        regexp: "^listen_addresses = '{{ postgres_listen_addresses }}'"
        insertafter: "^#listen_addresses = 'localhost'"
        line: "listen_addresses = '{{ postgres_listen_addresses }}'"
      notify:
        - restart-postgresql

    - name: Custom postgresql Configuration
      lineinfile:
        path: "{{ postgresql_conf_path }}/postgresql.conf"
        regexp: "^{{ item['line'] }}"
        line: "{{ item['line'] }}"
        state: "{{ item['state'] | default(omit) }}"
        backup: true
      with_items: "{{ postgres_config }}"
      notify:
        - restart-postgresql

    - name: Configure postgresql client auth
      template:
        src: "pg_hba.conf.j2"
        dest: "{{ postgresql_conf_path }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: 'u=rw'
      notify:
        - restart-postgresql

    - name: "Create a new database with name {{ item }}"
      postgresql_db:
        name: "{{ item }}"
      loop:
        - "{{ repo_db_name }}"
        - "{{ sync_db_name }}"

    - name: "Connect to {{ repo_db_name }} database and set user's password with no expire date"
      postgresql_user:
        db: "{{ repo_db_name }}"
        name: "{{ repo_db_username }}"
        password: "{{ repo_db_password }}"
        priv: "ALL"
        expires: infinity
        role_attr_flags: SUPERUSER
      no_log: true
      tags:
        - molecule-idempotence-notest

    - name: "Connect to {{ sync_db_name }} database and set user's password with no expire date"
      postgresql_user:
        db: "{{ sync_db_name }}"
        name: "{{ sync_db_username }}"
        password: "{{ sync_db_password }}"
        priv: "ALL"
        expires: infinity
        role_attr_flags: SUPERUSER
      no_log: true
      tags:
        - molecule-idempotence-notest
