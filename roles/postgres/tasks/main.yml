---
- name: Include OS specific variables
  include_vars: "{{ item }}"
  loop: "{{ lookup('first_found', os_fallback, errors='ignore', wantlist=True) }}"

- name: Prepare package manager
  include_tasks: "{{ ansible_pkg_mgr }}_repo.yml"

- name: Install packages
  package:
    name: "{{ postgresql_packages }}"
    state: present
    update_cache: yes

- name: Initialize the system database
  command:
    cmd: "{{ postgresql_setup_path }} initdb"
    creates: "{{ postgresql_data_path }}/PG_VERSION"
  when: ansible_os_family == 'RedHat'

- name: Configure postgresql to listen on all IP interfaces
  lineinfile:
    path: "{{ postgresql_conf_path }}/postgresql.conf"
    regexp: "^listen_addresses = '{{ postgres_listen_addresses }}'"
    insertafter: "^#listen_addresses = 'localhost'"
    line: "listen_addresses = '{{ postgres_listen_addresses }}'"
  notify:
    - restart-postgresql

- name: Custom postgresql Configuration
  lineinfile:
    path: "{{ postgresql_conf_path }}/postgresql.conf"
    regexp: "^{{ item['line'] }}"
    line: "{{ item['line'] }}"
    state: "{{ item['state'] | default(omit) }}"
    backup: true
  with_items: "{{ postgres_config }}"
  notify:
    - restart-postgresql

- name: Configure postgresql client auth
  template:
    src: "pg_hba.conf.j2"
    dest: "{{ postgresql_conf_path }}/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: 'u=rw'
  notify:
    - restart-postgresql

- name: Ensure postgresql service is started and enabled on boot
  systemd:
    name: "{{ postgresql_service }}"
    state: started
    enabled: true

- name: Configure Alfresco databases
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: yes
  block:
    - name: "Create necessary databases"
      postgresql_db:
        name: "{{ item }}"
      loop:
        - "{{ repo_db_name }}"
        - "{{ sync_db_name }}"
    
    - name: "Give {{ repo_db_username }} user to access {{ repo_db_name }} database with password"
      postgresql_user:
        db: "{{ repo_db_name }}"
        name: "{{ repo_db_username }}"
        password: "{{ repo_db_password }}"
        priv: "ALL"
        expires: infinity
        role_attr_flags: SUPERUSER
      tags:
        - molecule-idempotence-notest
    
    - name: "Give {{ sync_db_username }} user to access {{ sync_db_name }} database with password"
      postgresql_user:
        db: "{{ sync_db_name }}"
        name: "{{ sync_db_username }}"
        password: "{{ sync_db_password }}"
        priv: "ALL"
        expires: infinity
        role_attr_flags: SUPERUSER
      tags:
        - molecule-idempotence-notest
