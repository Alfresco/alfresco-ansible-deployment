---
- name: Include OS specific variables
  include_vars: "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"

- name: Install rpm repo
  become: true
  become_user: root
  yum:
    name: "{{ postgresql_rpm_repo }}"
    state: present
    disable_gpg_check: True

- name: Install packages required for CentOS 8
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - glibc-langpack-en
  when: ansible_distribution_major_version == "8"

- name: Disable the built-in PostgreSQL module
  command: dnf -qy module disable postgresql
  args:
    warn: false  # set warn=false to prevent warning
  register: disable_dnf_module
  changed_when: "'Nothing to do.' not in disable_dnf_module.stdout"
  when: ansible_distribution_major_version == "8"

- name: Install packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ postgresql_packages }}"

- name: Check if PG_VERSION exists
  stat:
    path: "{{ postgresql_data_path }}/PG_VERSION"
  register: pg_version

- name: Initialize the system database
  command: "{{ postgresql_setup_path }} initdb"
  when: not pg_version.stat.exists

- name: Configure postgresql to listen on all IP interfaces
  lineinfile:
    path: "{{ postgresql_conf_path }}/postgresql.conf"
    regexp: "^listen_addresses = '{{ postgres_listen_addresses }}'"
    insertafter: "^#listen_addresses = 'localhost'"
    line: "listen_addresses = '{{ postgres_listen_addresses }}'"

- name: Custom postgresql Configuration
  lineinfile:
    path: "{{ postgresql_conf_path }}/postgresql.conf"
    regexp: "^{{ item['line'] }}"
    line: "{{ item['line'] }}"
    state: "{{ item['state'] | default(omit) }}"
    backup: true
  with_items: "{{ postgres_config }}"

# - name: Change scram-sha-256 auth method to md5
#   replace:
#     path: "{{ postgresql_conf_path }}/pg_hba.conf"
#     regexp: "scram-sha-256"
#     replace: "md5"

- name: Configure postgresql client auth
  lineinfile:
    path: "{{ postgresql_conf_path }}/pg_hba.conf"
    insertbefore: EOF
    line: "{{ item['type'] }}\t{{ item['database'] }}\t{{ item['user'] }}\t{{ item['address'] }}\t{{ item['method'] }}"
    state: "{{ item['state'] | default(omit) }}"
    backup: true
  with_items: "{{ postgres_client_auth }}"

- name: Ensure postgresql service is started and enabled on boot
  systemd:
    name: "{{ postgresql_service }}"
    state: started
    enabled: true

- name: Change "postgres" pass
  become: true
  become_user: postgres
  postgresql_user:
    name: "postgres"
    password: "{{ postgres_pass }}"
