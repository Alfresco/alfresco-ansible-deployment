---
- name: Include OS specific variables
  include_vars: "{{ item }}"
  loop: >-
    {{ lookup('first_found', os_fallback, errors='ignore', wantlist=True) }}

- name: Install PostgreSQL RDBMS
  become: true
  block:
    - name: Prepare package manager
      include_tasks: "{{ ansible_pkg_mgr }}_repo.yml"

    - name: Install packages
      package:
        name: "{{ postgresql_packages }}"
        state: present
        update_cache: true
      notify:
        - Enable-postgresql

    - name: Initialize the system database
      command:
        cmd: "{{ postgresql_setup_path }} initdb"
        creates: "{{ postgresql_data_path }}/PG_VERSION"
      when: ansible_os_family == 'RedHat'

- name: Configure PostgreSQL RDBMS
  become: true
  notify:
    - Restart-postgresql
  block:
    - name: Configure postgresql to listen on all IP interfaces
      lineinfile:
        path: "{{ postgresql_conf_path }}/postgresql.conf"
        regexp: ^\s*listen_addresses\s*=
        line: "listen_addresses = '{{ postgres_listen_addresses }}'"

    - name: Custom postgresql Configuration
      lineinfile:
        path: "{{ postgresql_conf_path }}/postgresql.conf"
        regexp: "^{{ item['line'] }}"
        line: "{{ item['line'] }}"
        state: "{{ item['state'] | default(omit) }}"
        backup: true
      with_items: "{{ postgres_config }}"

    - name: Configure postgresql client auth
      template:
        src: "pg_hba.conf.j2"
        dest: "{{ postgresql_conf_path }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: 'u=rw'

- name: Always flush after Configure PostgreSQL RDBMS block
  meta: flush_handlers

- name: Configure PostgreSQL RDBMS
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  block:
    - name: Create necessary databases
      community.postgresql.postgresql_db:
        name: "{{ item }}"
      loop:
        - "{{ repo_db_name }}"
        - "{{ sync_db_name }}"

    - name: Revoke default access to public schema
      community.postgresql.postgresql_privs:
        db: "{{ item }}"
        privs: ALL
        type: schema
        objs: public
        role: public
        state: absent
      loop:
        - "{{ repo_db_name }}"
        - "{{ sync_db_name }}"
      tags:
        - molecule-idempotence-notest

    - name: Create unprivileged users
      community.postgresql.postgresql_user:
        db: "{{ item.db }}"
        name: "{{ item.user }}"
        password: "{{ item.pwd }}"
        expires: infinity
        role_attr_flags: NOSUPERUSER
      no_log: true
      loop:
        - db: "{{ repo_db_name }}"
          user: "{{ repo_db_username }}"
          pwd: "{{ repo_db_password }}"
        - db: "{{ sync_db_name }}"
          user: "{{ sync_db_username }}"
          pwd: "{{ sync_db_password }}"
      tags:
        - molecule-idempotence-notest

    - name: Grant db privileges to users
      community.postgresql.postgresql_privs:
        db: "{{ item.db }}"
        privs: ALL
        type: schema
        objs: public
        role: "{{ item.user }}"
      loop:
        - db: "{{ repo_db_name }}"
          user: "{{ repo_db_username }}"
        - db: "{{ sync_db_name }}"
          user: "{{ sync_db_username }}"

    - name: >-
        Revoke {{ repo_db_username }} user access to
        {{ sync_db_name }} database due to previous bug
      community.postgresql.postgresql_user:
        db: "{{ sync_db_name }}"
        name: "{{ repo_db_username }}"
        priv: "ALL"
        state: absent
        fail_on_user: false
      tags:
        - molecule-idempotence-notest
