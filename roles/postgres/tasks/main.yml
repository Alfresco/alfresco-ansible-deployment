---
- name: Include OS family specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Include OS specific tasks
  include_tasks: "{{ ansible_os_family }}.yml"

- name: Install packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ postgresql_packages[postgres_major_version] }}"

- name: Check if PG_VERSION exists
  stat:
    path: "{{ postgresql_data_path[postgres_major_version] }}/PG_VERSION"
  register: pg_version

- name: Initialize the system database
  command: "{{ postgresql_setup_path[postgres_major_version] }} initdb"
  when: not pg_version.stat.exists

- name: Configure postgresql to listen on all IP interfaces
  lineinfile:
    path: "{{ postgresql_conf_path[postgres_major_version] }}/postgresql.conf"
    regexp: "^listen_addresses = '{{ postgres_listen_addresses }}'"
    insertafter: "^#listen_addresses = 'localhost'"
    line: "listen_addresses = '{{ postgres_listen_addresses }}'"

- name: Custom postgresql Configuration
  lineinfile:
    path: "{{ postgresql_conf_path[postgres_major_version] }}/postgresql.conf"
    regexp: "^{{ item['line'] }}"
    line: "{{ item['line'] }}"
    state: "{{ item['state'] | default(omit) }}"
    backup: true
  with_items: "{{ postgres_config }}"

- set_fact: external_ip="localhost"
  when: hostvars['repository_1'] is undefined

- name: Configure postgresql client auth
  lineinfile:
    path: "{{ postgresql_conf_path[postgres_major_version] }}/pg_hba.conf"
    insertbefore: BOF
#    regexp: ^{{ item['type'] }}\s+{{ item['database'] }}\s+{{ item['user'] }}\s+{{ item['address'] }}\s+{{ item['method'] }}
    line: "{{ item['type'] }}\t{{ item['database'] }}\t{{ item['user'] }}\t{{ item['address'] }}\t{{ item['method'] }}"
    state: "{{ item['state'] | default(omit) }}"
    backup: true
  with_items: "{{ postgres_client_auth }}"

- name: Ensure postgresql service is started and enabled on boot
  systemd:
    name: "{{ postgresql_service[postgres_major_version] }}"
    state: started
    enabled: true

- name: Change "postgres" pass
  become: true
  become_user: postgres
  postgresql_user:
    name: "postgres"
    password: "{{ postgres_pass }}"
