---
- name: Include vars for postgres credentials
  include_vars: "postgres.yml"

- name: ensure a list of packages installed
  become: true
  package:
    name: "{{ utils }}"
    state: present
  poll: 0
  loop: "{{ utils }}"

- name: Check if Alfresco version {{ alfresco.version }} is installed
  stat:
    path: "{{ content_data_folder }}/webapps/alfresco/META-INF/MANIFEST.MF"
  register: alf_install_check
  changed_when: not alf_install_check.stat.exists

- name: Check if zip file exists or content folder exists
  block:
    - name: Check if zip file exists
      stat:
        path: "{{ content_folder }}/content-services-{{ alfresco.version }}.zip"
      register: archive_exists
      failed_when: false
    - name: Check if VERSIONS.md file exists
      stat:
        path: "{{ content_folder }}/VERSIONS.md"
      register: versions_exists
      failed_when: false

- name: Download DISTRIBUTION zip
  block:
    - name: Create {{ content_folder }} folder
      file:
        path: "{{ content_folder }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,go=rx'
    - name: Download 
      become: true
      become_user: "{{ username }}"
      get_url:
        url: "{{ distribution_zip.url }}"
        dest: "{{ distribution_zip.dest }}"
        mode: 0444
        owner: "{{ username }}"
        group: "{{ group_name }}"
        url_username: "{{ nexus_user }}"
        url_password: "{{ nexus_password }}"
      register: download_dist
      until: download_dist is succeeded
      when: not archive_exists.stat.exists and not versions_exists.stat.exists

- name: Extract content-services-{{ alfresco.version }}.zip into {{ content_folder }}
  become: true
  become_user: "{{ username }}"
  unarchive:
    src: "{{ content_folder }}/content-services-{{ alfresco.version }}.zip"
    dest: "{{ content_folder }}"
    remote_src: yes
  when: download_dist is succeeded

- name: Remove Alfresco Content Services {{ alfresco.version }} zip file
  become: true
  file:
    path: "{{ content_folder }}/content-services-{{ alfresco.version }}.zip"
    state: absent
  when: download_dist is succeeded

- name: Create configuration and data directories
  become: true
  become_user: "{{ username }}"
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,go=rx'
    recurse: yes
  loop:
    - "{{ settings_folder }}"
    - "{{ content_data_folder }}/content"
    - "{{ settings_folder }}/classpath"

- name: Move licenses and keystore folders
  block:
    - name: Copy licenses folder to {{ settings_folder }}
      copy:
        remote_src: true
        src: "{{ content_folder }}/licenses"
        dest: "{{ settings_folder }}"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
    - name: Copy keystore folder {{ content_data_folder }}
      copy:
        remote_src: true
        src: "{{ content_folder }}/alf_data/keystore"
        dest: "{{ content_data_folder }}"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
    - name: Remove licenses folder
      file:
        path: "{{ content_folder }}/licenses"
        state: absent
    - name: Remove keystore folder
      file:
        path: "{{ content_folder }}/alf_data/keystore"
        state: absent

- name: Move shared/classes to the {{ settings_folder }}/classpath
  block:
    - name: Copy shared/classes to the {{ settings_folder }}/classpath
      copy:
          remote_src: true
          src: "{{ content_folder }}/web-server/shared/classes/"
          dest: "{{ settings_folder }}/classpath/"
          owner: "{{ username }}"
          group: "{{ group_name }}"
          mode: 'u=rwx,g=rwx,o=rx'
    - name: Remove licenses folder
      file:
        path: "{{ content_folder }}/web-server/shared/classes/"
        state: absent