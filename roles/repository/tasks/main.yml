---
- name: Include OS specific variables
  ansible.builtin.include_vars: "{{ item }}"
  loop: >-
    {{ lookup('first_found', os_fallback, errors='ignore', wantlist=True) }}

- name: Instanciate Java keystore
  ansible.builtin.include_role:
    name: ../roles/java
    tasks_from: keystores
  when: repo_keystore
  vars:
    java_keystore: "{{ repo_keystore }}"

- name: Handle secure properties
  block:
    - name: Initialize temporary accumulator
      ansible.builtin.set_fact:
        temp_array: []

    - name: Set solr.sharedSecret property
      ansible.builtin.set_fact:
        temp_array: >-
          {{ temp_array + [ '-Dsolr.sharedSecret=' ~ reposearch_shared_secret | quote ] }}
      when: acs.version is version('7.2.0', '>=')

    - name: Set metadata-keystore.password and related properties
      ansible.builtin.set_fact:
        temp_array: "{{ temp_array + [
          '-Dmetadata-keystore.password=' ~ repo_custom_keystore_password | quote,
          '-Dmetadata-keystore.aliases=metadata',
          '-Dmetadata-keystore.metadata.password=' ~ repo_custom_keystore_metadata_password | quote
          ] }}"
      when:
        - repo_custom_keystore_password is defined
        - repo_custom_keystore_metadata_password is defined

    - name: Combine secure acs environment
      ansible.builtin.set_fact:
        acs_secure_environment:
          JAVA_TOOL_OPTIONS: "{{ temp_array }}"
      when: temp_array|length > 0

- name: Ensure a list of packages installed
  become: true
  ansible.builtin.package:
    name: "{{ utils_repo + utils_storage[cs_storage.type | default('tmpfs')] }}"
    state: present

- name: Create folders
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rx,o=rx'
  loop:
    - "{{ content_folder }}/modules/acs-platform"
    - "{{ content_folder }}/modules/acs-share"
    - "{{ content_folder }}/amps_repo"
    - "{{ content_folder }}/amps_share"
    - "{{ content_folder }}/alf_data"
    - "{{ content_folder }}/alfresco-mmt"
    - "{{ content_folder }}/web-server/lib"
    - "{{ content_folder }}/web-server/webapps"
    - "{{ settings_folder }}/classpath/alfresco/extension/transform/pipelines"
    - "{{ settings_folder }}/classpath/alfresco/extension/transform/renditions"
    - "{{ settings_folder }}/classpath/alfresco/extension/mimetypes"
    - "{{ settings_folder }}/classpath/alfresco/web-extension"
    - "{{ tomcat_config_dir }}/lib"
    - "{{ tomcat_config_dir }}/conf/Catalina/localhost"

- name: Proceed with Shared contentstore tasks
  ansible.builtin.include_tasks: sharedcs.yml

- name: Download war files
  become: true
  loop: "{{ war_downloads }}"
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    checksum: sha1:{{ lookup('url', item.sha1_checksum_url, username=nexus_user, password=nexus_password) }}
    dest: "{{ item.dest }}"
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: "0644"
  register: war_download_result
  async: 900
  no_log: true
  poll: 0
  tags:
    - molecule-idempotence-notest

- name: Download {{ acs.artifact_name }}.zip
  ansible.builtin.get_url:
    url: "{{ downloads.acs_zip_url }}"
    dest: "{{ download_location }}/{{ acs.artifact_name }}.zip"
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    checksum: sha1:{{ lookup('url', downloads.acs_zip_sha1_checksum_url, username=nexus_user, password=nexus_password) }}
  register: distribution_download_result
  async: 1800
  poll: 0
  tags:
    - molecule-idempotence-notest

- name: Download AMPS
  become: true
  loop: "{{ amp_downloads }}"
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    checksum: sha1:{{ lookup('url', item.sha1_checksum_url, username=nexus_user, password=nexus_password) }}
    dest: "{{ item.dest }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rw,g=r,o=r'
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
  register: amp_download_result
  async: 900
  poll: 0
  tags:
    - molecule-idempotence-notest

- name: Download postgresql jar
  become: true
  ansible.builtin.get_url:
    url: "{{ dependencies_url.postgresql_connector }}"
    checksum: sha1:{{ lookup('url', dependencies_url.postgresql_connector_sha1_checksum_url) }}
    dest: "{{ tomcat_config_dir }}/lib/postgresql.jar"
    mode: 'u=rw,g=r,o=r'
    owner: "{{ username }}"
    group: "{{ group_name }}"
  register: postgresql_download
  when: repo_db_url == ""
  async: 900
  poll: 0
  tags:
    - molecule-idempotence-notest

- name: Verifying if the distribution zip finished downloading
  ansible.builtin.async_status:
    jid: "{{ distribution_download_result.ansible_job_id }}"
  until: job_result.finished
  delay: 10
  retries: 180
  register: job_result
  tags:
    - molecule-idempotence-notest

- name: Extract {{ acs.artifact_name }}.zip into {{ content_folder }}
  become: true
  ansible.builtin.unarchive:
    src: "{{ download_location }}/{{ acs.artifact_name }}.zip"
    dest: "{{ content_folder }}"
    remote_src: true
    creates: "{{ content_folder }}/bin"
    owner: "{{ username }}"
    group: "{{ group_name }}"

- name: Prepare ACS directory structure
  become: true
  block:
    - name: Add ACS home to setenv.sh
      ansible.builtin.lineinfile:
        path: "{{ config_folder }}/setenv.sh"
        insertafter: EOF
        line: "export ACS_HOME={{ binaries_folder }}/content-services-{{ acs.version }}"
        owner: "{{ username }}"
        group: "{{ group_name }}"

    - name: Add ACS home to tomcat.sh
      ansible.builtin.lineinfile:
        path: "{{ binaries_folder }}/tomcat.sh"
        insertafter: 'CATALINA_OPTS'
        line: >-
          export CATALINA_OPTS="${CATALINA_OPTS}
          -Dacs.home=${ACS_HOME}
          -Dats-tengine-aio.host={{ ats_tengine_aio_host }}
          -Dats-shared-fs.host={{ sfs_host }}"
        owner: "{{ username }}"
        group: "{{ group_name }}"

    - name: Add additional env vars to tomcat.sh
      ansible.builtin.lineinfile:
        path: "{{ binaries_folder }}/tomcat.sh"
        insertafter: 'CATALINA_OPTS'
        line: export {{ item.key }}="{{ item.value | join(' ') }}"
        owner: "{{ username }}"
        group: "{{ group_name }}"
      loop: >-
        {{ acs_environment
        | combine(acs_secure_environment
        | default(None), list_merge='prepend')
        | dict2items }}

    - name: Create apply_amps.sh
      ansible.builtin.template:
        owner: "{{ username }}"
        group: "{{ group_name }}"
        src: apply_amps.sh
        dest: "{{ content_folder }}"
        mode: "0755"

    - name: Install ACS data files to Linux FHS destinations
      block:
        - name: Copy Alfresco data files
          ansible.builtin.copy:
            remote_src: true
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            owner: "{{ username }}"
            group: "{{ group_name }}"
            mode: "u+rw,g+r,o="
          loop:
            - src: "{{ content_folder }}/amps/alfresco-share-services.amp"
              dest: "{{ content_folder }}/amps_repo"
            - src: "{{ keystore_src }}"
              dest: "{{ content_data_folder }}/keystore/"
            - src: "{{ content_folder }}/web-server/shared/classes/"
              dest: "{{ settings_folder }}/classpath/"
      rescue:
        - name: Check Unix FHS dirs
          ansible.builtin.stat:
            path: "{{ item }}"
          register: alf_dest_dirs
          loop:
            - "{{ content_folder }}/amps_repo/alfresco-share-services.amp"
            - "{{ content_data_folder }}/keystore/"
            - "{{ settings_folder }}/classpath/"
        - name: Handle missing sources
          ansible.builtin.debug:
            msg: Looks like the FHS directory structure is already in place
          when: >-
            not alf_dest_dirs.results
            | map(attribute='stat.exists')
            | difference([True])
        - name: Fail on unexcepted FHS inconsistency
          ansible.builtin.fail:
            msg: |-
              Oh oh that should not happen...
              Looks like the FHS directory structure is broken and can't be
              re-created.
              Please reinstall from scratch :(
          when: >-
            alf_dest_dirs.results
            | map(attribute='stat.exists')
            | difference([True])

    - name: Remove Alfresco data source files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ content_folder }}/amps"
        - "{{ keystore_src }}"
        - "{{ content_folder }}/web-server/shared/classes/"

- name: Configure ACS
  become: true
  notify:
    - Restart-alfresco-content
  block:
    - name: Add the configuration templates
      ansible.builtin.template:
        owner: "{{ username }}"
        group: "{{ group_name }}"
        src: "{{ item }}.j2"
        dest: >-
          {{ settings_folder }}/classpath/alfresco/web-extension/{{ item }}
        mode: "0644"
      loop: "{{ share_templates }}"

    - name: Add Hazelcast cluster config for Share
      become: true
      ansible.builtin.template:
        owner: "{{ username }}"
        group: "{{ group_name }}"
        src: custom-slingshot-application-context.xml
        dest: "{{ settings_folder }}/classpath/alfresco/web-extension/custom-slingshot-application-context.xml"
        mode: 'u=rw,g=,o='
      when: groups['repository'] | length > 1 and not cluster_keepoff

    - name: Copy db_connector_repo to {{ tomcat_config_dir }}/lib/ folder
      ansible.builtin.copy:
        src: "{{ inventory_dir }}/configuration_files/db_connector_repo/"
        dest: "{{ tomcat_config_dir }}/lib/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: "0640"
      when: repo_db_url != ""

    - name: Copy user provided license file
      ansible.builtin.copy:
        src: "{{ role_path }}/../../configuration_files/licenses/"
        dest: "{{ settings_folder }}/licenses/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: "0640"

    - name: Copy BSSRF enabled pipaline transformers
      ansible.builtin.copy:
        content: "{{ bssrf_pipelines | to_nice_json }}"
        dest: "{{ settings_folder }}/classpath/alfresco/extension/transform/pipelines/0200-html-via-txt.json"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: "0640"
      when: bssrf_protection_enabled

    - name: Copy custom keystore file
      ansible.builtin.copy:
        src: "{{ role_path }}/../../configuration_files/keystores/"
        dest: "{{ content_data_folder }}/keystore/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: "0640"
      when: use_custom_keystores

    - name: Create config folders
      ansible.builtin.file:
        state: directory
        path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/"
        mode: "0755"
        owner: "{{ username }}"
        group: "{{ group_name }}"

    - name: Create config files
      ansible.builtin.template:
        src: "{{ item }}.xml"
        dest: "{{ tomcat_config_dir }}/conf/Catalina/localhost/{{ item }}.xml"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: "0644"
      loop:
        - alfresco
        - share
        - ROOT
        - _vti_bin
        - api-explorer
    - name: Remove conf files
      ansible.builtin.file:
        path: "{{ content_folder }}/web-server/conf"
        state: absent

    - name: Create alfresco-global.properties
      vars:
        merged_repository_properties: >-
          {{ default_repository_properties
          | combine(repository_properties
          | default(None)) }}"
      ansible.builtin.template:
        owner: "{{ username }}"
        group: "{{ group_name }}"
        src: alfresco-global.properties.j2
        dest: "{{ settings_folder }}/classpath/alfresco-global.properties"
        mode: "0640"
      tags:
        - molecule-idempotence-notest  # see OPSEXP-1280

    - name: Setup common loader
      ansible.builtin.lineinfile:
        path: "{{ tomcat_config_dir }}/conf/catalina.properties"
        regexp: ^\s*common.loader\s*=
        line: >
          common.loader="{{ config_folder }}/content-services/classpath","${catalina.base}/lib",
          "${catalina.base}/lib/*.jar","{{ content_folder }}/web-server/lib",
          "{{ content_folder }}/web-server/lib/*.jar","${catalina.home}/lib","${catalina.home}/lib/*.jar"
        owner: "{{ username }}"
        group: "{{ group_name }}"

    - name: >-
        Insert or Update custom properties added through
        configuration_files/alfresco-global.properties
      ansible.builtin.blockinfile:
        path: "{{ settings_folder }}/classpath/alfresco-global.properties"
        marker: "{mark} - ANSIBLE MANAGED BLOCK"
        marker_begin: "### Begin - Custom user properties"
        marker_end: "### End - Custom user properties"
        insertafter: EOF
        block: >-
          {{ lookup('file', role_path + '/../../configuration_files/alfresco-global.properties') }}
        owner: "{{ username }}"
        group: "{{ group_name }}"
      tags:
        - molecule-idempotence-notest  # see OPSEXP-1280

- name: Check on amp download async task
  become: true
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 1
  retries: 300
  loop: "{{ amp_download_result.results }}"
  tags:
    - molecule-idempotence-notest

- name: Install amps on alfresco and share war files
  become: true
  ansible.builtin.shell: '{{ content_folder }}/apply_amps.sh -nobackup -force'
  register: mmt_install
  changed_when: mmt_install.rc != 0
  tags:
    - molecule-idempotence-notest

- name: Check on postgres download async task
  become: true
  ansible.builtin.async_status:
    jid: "{{ postgresql_download.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 1
  retries: 300
  when: repo_db_url == ""
  tags:
    - molecule-idempotence-notest

- name: Check on war download async task
  become: true
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 2
  retries: 300
  loop: "{{ war_download_result.results }}"
  tags:
    - molecule-idempotence-notest

- name: Setup ACS service
  become: true
  vars:
    systemd_root: /etc/systemd/system/
  notify:
    - Systemd-reload
  block:
    - name: Create systemd overrides folder
      ansible.builtin.file:
        path: "{{ systemd_root }}/alfresco-content.service.d"
        state: directory
        owner: root
        group: root
        mode: "0700"
    - name: Systemd Overrides for the tomcat unit
      ansible.builtin.template:
        src: alfresco-content-unit-overrides.j2
        dest: "{{ systemd_root }}/alfresco-content.service.d/environment.conf"
        mode: "0600"
        owner: root
        group: root
    - name: Create monitoring start up service
      ansible.builtin.template:
        src: alfresco-content-monitored-startup.sh.j2
        dest: "{{ binaries_folder }}/alfresco-content-monitored-startup.sh"
        mode: "0750"
    - name: Create monitored start up service
      ansible.builtin.template:
        src: alfresco-content-monitored-startup.service.j2
        dest: "{{ systemd_root }}/alfresco-content-monitored-startup.service"
        mode: "0644"
        owner: root
        group: root

- name: Wait-for-db
  ansible.builtin.wait_for:
    host: "{{ db_host }}"
    port: "{{ ports_cfg.postgres.sql }}"
  when: not repo_db_url | default(false)
