---
- name: Include OS specific variables
  include_vars: "{{ item }}"
  loop: "{{ lookup('first_found', os_fallback, errors='ignore', wantlist=True) }}"

- name: Ensure a list of packages installed
  become: true
  become_user: root
  package:
    name: "{{ item }}"
    state: present
  loop: "{{ utils_repo }}"

- name: Create folders
  become: true
  become_user: root
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rx,o=rx'
  loop:
     - "{{ content_folder }}/modules/acs-platform"
     - "{{ content_folder }}/modules/acs-share"
     - "{{ content_folder }}/amps_repo"
     - "{{ content_folder }}/amps_share"
     - "{{ content_folder }}/alf_data"
     - "{{ content_folder }}/alfresco-mmt"
     - "{{ content_folder }}/webapps/alfresco"
     - "{{ content_folder }}/web-server/lib"
     - "{{ content_folder }}/web-server/webapps"
     - "{{ settings_folder }}/classpath/alfresco/extension/transform/pipelines"
     - "{{ settings_folder }}/classpath/alfresco/extension/transform/renditions"
     - "{{ settings_folder }}/classpath/alfresco/extension/mimetypes"
     - "{{ settings_folder }}/classpath/alfresco/web-extension"
     - "{{ content_data_folder }}/keystore"
     - "{{ tomcat_config_dir }}/lib"
     - "{{ tomcat_config_dir }}/conf/Catalina/localhost"

- name: "Download {{ acs_zip_file }}"
  get_url:
    url: "{{ downloads.acs_zip_url }}"
    dest: "{{ download_location }}/{{ acs_zip_file }}"
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    checksum: "sha1:{{ downloads.acs_zip_sha1_checksum }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rw,g=r,o=r'
  register: distribution_download_result
  async: 900
  poll: 0

- name: Download AMPS
  become: true
  become_user: root
  loop: "{{ amp_downloads }}"
  get_url:
    url: "{{ item.url }}"
    checksum: sha1:{{ item.sha1_checksum }}
    dest: "{{ item.dest }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rw,g=r,o=r'
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
  register: amp_download_result
  async: 900
  no_log: true
  poll: 0

- name: Download postgresql jar
  become: true
  become_user: root
  get_url:
    url: "{{ dependencies_url.postgresql_connector }}"
    checksum: sha1:{{ dependencies_url.postgresql_connector_sha1_checksum }}
    dest: "{{ tomcat_config_dir }}/lib/postgresql.jar"
    mode: 'u=rw,g=r,o=r'
    owner: "{{ username }}"
    group: "{{ group_name }}"
  register: postgresql_download
  when: repo_db_url == ""
  async: 900
  poll: 0

- name: Copy db_connector_repo to {{ tomcat_config_dir }}/lib/ folder
  block:
    - name: Copy db_connector_repo
      copy:
        src: "{{ inventory_dir }}/configuration_files/db_connector_repo/"
        dest: "{{ tomcat_config_dir }}/lib/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
  when: repo_db_url != ""

- name: Add ACS home to setenv.sh
  become: true
  lineinfile:
    path: "{{ config_folder }}/setenv.sh"
    insertafter: EOF
    line: "export ACS_HOME={{ binaries_folder }}/content-services-{{ acs.version }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"

- name: Add ACS home to tomcat.sh
  become: true
  lineinfile:
    path: "{{ binaries_folder }}/tomcat.sh"
    insertafter: 'CATALINA_OPTS'
    line: export CATALINA_OPTS="${CATALINA_OPTS} -Dacs.home=${ACS_HOME} -Dats-tengine-aio.host={{ ats_tengine_aio_host }} -Dats-shared-fs.host={{ sfs_host }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"

- name: Add additional env vars to tomcat.sh
  become: true
  lineinfile:
    path: "{{ binaries_folder }}/tomcat.sh"
    insertafter: 'CATALINA_OPTS'
    line: export {{ item.key }}="{{ item.value }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"
  loop: "{{ acs_environment | dict2items }}"

- name: Verifying if the distribution zip finished downloading
  async_status:
    jid: "{{ distribution_download_result.ansible_job_id }}"
  until: job_result.finished
  delay: 30
  retries: 20
  register: job_result

- name: Add the configuration templates
  become: true
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: "{{ item }}"
    dest: "{{ settings_folder }}/classpath/alfresco/web-extension/{{ item }}"
    mode: 'u=rwx,g=rwx,o=rx'
  loop: "{{ share_templates }}"
  changed_when: false

- name: Extract {{ acs_zip_file }} into {{ content_folder }}
  become: true
  unarchive:
    src: "{{ download_location }}/{{ acs_zip_file }}"
    dest: "{{ content_folder }}"
    remote_src: true
    creates: "{{ content_folder }}/bin"
    owner: "{{ username }}"
    group: "{{ group_name }}"

- name: Move alfresco-share-services.amp to {{ content_folder }}/amps_repo folder
  block:
    - name: Check if alfresco-share-services.amp file exists
      stat:
        path: "{{ content_folder }}/amps/alfresco-share-services.amp"
      register: share_amp_exists
    - name: Copy alfresco-share-services.amp
      copy:
        remote_src: true
        src: "{{ content_folder }}/amps/alfresco-share-services.amp"
        dest: "{{ content_folder }}/amps_repo/alfresco-share-services.amp"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
      when: share_amp_exists.stat.exists
    - name: Remove amps folder
      file:
        path: "{{ content_folder }}/amps"
        state: absent

- name: Download war files
  become: true
  become_user: root
  loop: "{{ war_downloads }}"
  changed_when: false
  get_url:
    url: "{{ item.url }}"
    checksum: sha1:{{ item.sha1_checksum }}
    dest: "{{ item.dest }}"
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'
  register: war_download_result
  async: 900
  no_log: true
  poll: 0

- name: Copy user provided license file
  copy:
    src: "{{ role_path }}/../../configuration_files/licenses/"
    dest: "{{ settings_folder }}/licenses/"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'

- name: Move keystore folders for ACS7
  block:
    - name: Check if source keystore folder exists
      stat:
        path: "{{ content_folder }}/keystore"
      register: keystore
    - name: Copy keystore folder {{ content_data_folder }}
      copy:
        remote_src: true
        src: "{{ content_folder }}/keystore/metadata-keystore/"
        dest: "{{ content_data_folder }}/keystore/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
      when:
        - keystore.stat.exists
        - not use_custom_keystores
    - name: Remove keystore folder
      file:
        path: "{{ content_folder }}/keystore"
        state: absent
    - name: copy custom keystore files
      copy:
        src: "{{ role_path }}/../../configuration_files/keystores/"
        dest: "{{ content_data_folder }}/keystore/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
      when: use_custom_keystores
  when: acs.version is version('7.0.0', 'ge')

- name: Move keystore folders for ACS6
  block:
    - name: Check if source keystore folder exists
      stat:
        path: "{{ content_folder }}/alf_data/keystore"
      register: keystore
    - name: Copy keystore folder {{ content_data_folder }}
      copy:
        remote_src: true
        src: "{{ content_folder }}/alf_data/keystore"
        dest: "{{ content_data_folder }}"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
      when:
        - keystore.stat.exists
        - not use_custom_keystores
    - name: Remove keystore folder
      file:
        path: "{{ content_folder }}/alf_data/keystore"
        state: absent
    - name: copy custom keystore file
      copy:
        src: "{{ role_path }}/../../configuration_files/keystores/"
        dest: "{{ content_data_folder }}/keystore/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
      when: use_custom_keystores
  when: acs.version is version('7.0.0', 'lt')

- name: Move classes folder
  block:
    - name: Check if classes files exists
      stat:
        path: "{{ settings_folder }}/classpath"
      register: classes
    - name: Copy classes
      become: true
      copy:
        remote_src: true
        src: "{{ content_folder }}/shared/classes/"
        dest: "{{ settings_folder }}/classpath/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
      when: not classes.stat.exists
    - name: Remove classes files
      file:
        path: "{{ content_folder }}/shared/classes/"
        state: absent

- name: Create web application config files
  block:
    - name: Create config folders
      file:
        state: directory
        path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/"
        mode: 0755
        owner: "{{ username }}"
        group: "{{ group_name }}"
    - name: Create config files
      template:
        src: "{{ item }}.xml"
        dest: "{{ tomcat_config_dir }}/conf/Catalina/localhost/{{ item }}.xml"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 0644
      loop:
        - alfresco
        - share
        - ROOT
        - _vti_bin
        - api-explorer
    - name: Remove conf files
      file:
        path: "{{ content_folder }}/web-server/conf"
        state: absent
  become: true

- name: Create alfresco-global.properties
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: alfresco-global.properties
    dest: "{{ settings_folder }}/classpath/alfresco-global.properties"
    mode: 'u=rwx,g=rwx,o=rx'

- name: Check on amp download async task
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 1
  retries: 300
  loop: "{{ amp_download_result.results }}"

- name: Create apply_amps.sh
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: apply_amps.sh
    dest: "{{ content_folder }}/apply_amps.sh"
    mode: 'u=rwx,g=rwx,o=rx'

- name: Install amps on alfresco and share war files
  shell: '{{ content_folder }}/apply_amps.sh -nobackup -force'
  register: mmt_install
  changed_when: mmt_install.rc != 0

- name: Check on postgres download async task
  become: true
  become_user: root
  async_status:
    jid: "{{ postgresql_download.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 1
  retries: 300
  when: repo_db_url == ""

- name: Check on war download async task
  become: true
  become_user: root
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 2
  retries: 300
  loop: "{{ war_download_result.results }}"

- name: Setup common loader
  become: true
  failed_when: false
  lineinfile:
    path: "{{ tomcat_config_dir }}/conf/catalina.properties"
    regexp: '^common.loader='
    line: "common.loader=\"/etc/opt/alfresco/content-services/classpath\",\"${catalina.base}/lib\",\"${catalina.base}/lib/*.jar\",\"{{ content_folder }}/web-server/lib\",\"{{ content_folder }}/web-server/lib/*.jar\",\"${catalina.home}/lib\",\"${catalina.home}/lib/*.jar\""
    owner: "{{ username }}"
    group: "{{ group_name }}"

- name: Insert or Update custom properties added through configuration_files/alfresco-global.properties
  blockinfile:
    path: "{{ settings_folder }}/classpath/alfresco-global.properties"
    marker: "{mark} - ANSIBLE MANAGED BLOCK"
    marker_begin: "### Begin - Custom user properties"
    marker_end: "### End - Custom user properties"
    insertafter: EOF
    block: "{{ lookup('file', role_path + '/../../configuration_files/alfresco-global.properties') }}"
  notify:
    - wait-for-db
    - set-go-signal
    - restart-alfresco-content
