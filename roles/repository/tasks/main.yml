---
- name: Include vars for postgres credentials
  include_vars: "postgres.yml"

- name: Include OS specific variables
  include_vars: "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"

- name: Ensure a list of packages installed
  become: true
  become_user: root
  package:
    name: "{{ item }}"
    state: present
  poll: 0
  loop: "{{ utils_repo }}"

- name: Create folders
  become: true
  become_user: root
  changed_when: false
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,go=rx'
    recurse: yes
  loop:
     - "{{ binaries_folder }}/modules/acs-platform"
     - "{{ binaries_folder }}/modules/acs-share"
     - "{{ content_folder }}/modules/acs-platform"
     - "{{ content_folder }}/modules/acs-share"
     - "{{ content_folder }}/amps_repo"
     - "{{ content_folder }}/amps_share"
     - "{{ content_folder }}/alf_data"
     - "{{ content_folder }}/alfresco-mmt"
     - "{{ content_folder }}/webapps/alfresco"
     - "{{ content_folder }}/licenses/"
     - "{{ content_folder }}/web-server/lib"
     - "{{ settings_folder }}/classpath/alfresco/extension/transform/pipelines"
     - "{{ settings_folder }}/classpath/alfresco/extension/transform/renditions"
     - "{{ settings_folder }}/classpath/alfresco/extension/mimetypes"
     - "{{ settings_folder }}/classpath/alfresco/web-extension"
     - "{{ content_data_folder }}/keystore"
     - "{{ tomcat_config_dir }}/lib"
     - "{{ tomcat_config_dir }}/conf/Catalina/localhost"
     - "{{ logs_folder }}/licenses/"

- name: Check if Alfresco version {{ acs.version }} is installed
  stat:
    path: "{{ content_data_folder }}/webapps/alfresco/META-INF/MANIFEST.MF"
  register: alf_install_check

- name: Download DISTRIBUTION files
  become: true
  become_user: root
  changed_when: false
  get_url:
    url: "{{ downloads.acs_zip_url }}"
    dest: "{{ download_dest }}"
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'
  register: distribution_download_result
  async: 900
  poll: 0
  when: not alf_install_check.stat.exists

- name: Download AMPS
  become: true
  become_user: root
  loop: "{{ query('items', amp_downloads) }}"
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 0644
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
  register: amp_download_result
  when: not alf_install_check.stat.exists
  async: 900
  poll: 0

- name: Download postgresql jar
  become: true
  become_user: root
  get_url:
    url: "{{ dependencies_url.postgresql_connector }}"
    dest: "{{ tomcat_config_dir }}/lib/postgresql.jar"
    mode: 0644
    owner: "{{ username }}"
    group: "{{ group_name }}"
  register: postgresql_download
  when: not alf_install_check.stat.exists
  async: 900
  poll: 0

- name: Add ACS home to setenv.sh
  become: true
  become_user: "{{ username }}"
  lineinfile:
    path: "{{ config_folder }}/setenv.sh"
    insertafter: EOF
    line: "export ACS_HOME={{ binaries_folder }}/content-services-{{ acs.version }}"

- name: Add ACS home to tomcat.sh
  become: true
  become_user: "{{ username }}"
  lineinfile:
    path: "/opt/alfresco/tomcat.sh"
    insertafter: 'CATALINA_OPTS'
    line: export CATALINA_OPTS="${CATALINA_OPTS} -Dacs.home=${ACS_HOME}"

- name: Verifying if the distribution zip finished downloading
  become: true
  become_user: root
  async_status:
    jid: "{{ distribution_download_result.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 30
  retries: 20

- name: Add the configuration templates
  become: true
  become_user: "{{ username }}"
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: "{{ item }}"
    dest: "{{ settings_folder }}/classpath/alfresco/web-extension/{{ item }}"
    mode: 'u=rwx,g=rwx,o=rx'
  loop: "{{ share_templates }}"
  changed_when: false

- name: Check if zip file exists
  stat:
    path: "{{ content_folder }}/content-services-{{ acs.version }}.zip"
  register: archive_exists

- name: Extract content-services-{{ acs.version }}.zip into {{ content_folder }}
  become: true
  become_user: "{{ username }}"
  unarchive:
    src: "{{ content_folder }}/content-services-{{ acs.version }}.zip"
    dest: "{{ content_folder }}"
    remote_src: yes
    creates: "{{ content_folder }}/bin"

- name: Move alfresco-share-services.amp to {{ content_folder }}/amps_repo folder
  block:
    - name: Copy alfresco-share-services.amp
      copy:
        remote_src: true
        src: "{{ content_folder }}/amps/alfresco-share-services.amp"
        dest: "{{ content_folder }}/amps_repo/alfresco-share-services.amp"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
    - name: Remove amps folder
      file:
        path: "{{ content_folder }}/amps"
        state: absent

- name: Download war files
  become: true
  become_user: root
  loop: "{{ query('items', war_downloads) }}"
  changed_when: false
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'
  register: war_download_result
  async: 900
  poll: 0
  when: not alf_install_check.stat.exists

- name: Remove Alfresco Content Services {{ acs.version }} zip file
  changed_when: false
  become: true
  file:
    path: "{{ content_folder }}/content-services-{{ acs.version }}.zip"
    state: absent
  when: archive_exists.stat.exists

- name: Move licenses folder
  block:
    - name: Check if source license folder exists
      stat:
        path: "{{ content_folder }}/licenses"
      register: licences
    - name: Copy licenses folder to {{ settings_folder }}
      copy:
        remote_src: true
        src: "{{ content_folder }}/licenses"
        dest: "{{ settings_folder }}"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
      when: licences.stat.exists
    - name: Remove licenses folder
      file:
        path: "{{ content_folder }}/licenses"
        state: absent

- name: Move keystore folders for ACS7
  block:
    - name: Check if source keystore folder exists
      stat:
        path: "{{ content_folder }}/keystore"
      register: keystore
    - name: Copy keystore folder {{ content_data_folder }}
      copy:
        remote_src: true
        src: "{{ content_folder }}/keystore/metadata-keystore/"
        dest: "{{ content_data_folder }}/keystore/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
      when: keystore.stat.exists
    - name: Remove keystore folder
      file:
        path: "{{ content_folder }}/keystore"
        state: absent
  when: acs.version is version('7.0.0', 'ge')

- name: Move keystore folders for ACS6
  block:
    - name: Check if source keystore folder exists
      stat:
        path: "{{ content_folder }}/alf_data/keystore"
      register: keystore
    - name: Copy keystore folder {{ content_data_folder }}
      copy:
        remote_src: true
        src: "{{ content_folder }}/alf_data/keystore"
        dest: "{{ content_data_folder }}"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
      when: keystore.stat.exists
    - name: Remove keystore folder
      file:
        path: "{{ content_folder }}/alf_data/keystore"
        state: absent
  when: acs.version is version('7.0.0', 'lt')

- name: Move classes folder
  block:
    - name: Check if classes files exists
      stat:
        path: "{{ settings_folder }}/classpath"
      register: classes
    - name: Copy classes
      become: true
      become_user: "{{ username }}"
      copy:
        remote_src: True
        src: "{{ content_folder }}/shared/classes/"
        dest: "{{ settings_folder }}/classpath/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
      when: not classes.stat.exists
    - name: Remove classes files
      file:
        path: "{{ content_folder }}/shared/classes/"
        state: absent

- name: Move conf folder
  block:
    - name: Check if conf files exist
      stat:
        path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/alfresco.xml"
      register: conf_exists
    - name: Copy conf
      become: true
      become_user: "{{ username }}"
      copy:
        remote_src: True
        src: "{{ content_folder }}/web-server/conf/Catalina/localhost/"
        dest: "{{ tomcat_config_dir }}/conf/Catalina/localhost/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
      when: not conf_exists.stat.exists
    - name: Remove conf files
      file:
        path: "{{ content_folder }}/web-server/conf"
        state: absent

- name: Add context home to alfresco.xml
  lineinfile:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/alfresco.xml"
    regexp: '<Context crossContext="true">'
    line: '<Context crossContext="true" docBase="{{ content_folder }}/web-server/webapps/alfresco.war">'

- name: Add context home to share.xml
  lineinfile:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/share.xml"
    regexp: '<Context crossContext="true">'
    line: '<Context crossContext="true" docBase="{{ content_folder }}/web-server/webapps/share.war">'

- name: Check if "{{ tomcat_config_dir }}/conf/Catalina/localhost/ROOT.xml" exists
  stat:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/ROOT.xml"
  register: root_xml

- name: Create ROOT.xml
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: ROOT.xml
    dest: "{{ tomcat_config_dir }}/conf/Catalina/localhost/ROOT.xml"
    mode: 'u=rwx,g=rwx,o=rx'
  when: not root_xml.stat.exists

- name: Check if "{{ tomcat_config_dir }}/conf/Catalina/localhost/_vti_bin.xml" exists
  stat:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/_vti_bin.xml"
  register: vti_xml

- name: Create _vti_bin.xml
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: _vti_bin.xml
    dest: "{{ tomcat_config_dir }}/conf/Catalina/localhost/_vti_bin.xml"
    mode: 'u=rwx,g=rwx,o=rx'
  when: not vti_xml.stat.exists

- name: Check if "{{ tomcat_config_dir }}/conf/Catalina/localhost/api-explorer.xml" exists
  stat:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/api-explorer.xml"
  register: api_explorer_xml

- name: Create api-explorer.xml
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: api-explorer.xml
    dest: "{{ tomcat_config_dir }}/conf/Catalina/localhost/api-explorer.xml"
    mode: 'u=rwx,g=rwx,o=rx'
  when: not api_explorer_xml.stat.exists

- name: Include postgres task
  include_tasks: "postgres.yml"

- name: Create alfresco-global.properties
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: alfresco-global.properties
    dest: "{{ settings_folder }}/classpath/alfresco-global.properties"
    mode: 'u=rwx,g=rwx,o=rx'

- name: Check on amp download async task
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 1
  retries: 300
  loop: "{{ amp_download_result.results }}"

- name: Create apply_amps.sh
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: apply_amps.sh
    dest: "{{ content_folder }}/apply_amps.sh"
    mode: 'u=rwx,g=rwx,o=rx'

- name: Install amps on alfresco and share war files
  shell: '{{ content_folder }}/apply_amps.sh -nobackup -force'
  register: mmt_install
  changed_when: mmt_install.rc != 0

- name: Check on postgres download async task
  become: true
  become_user: root
  async_status:
    jid: "{{ postgresql_download.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 1
  retries: 300

- name: Check on war download async task
  become: true
  become_user: root
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 2
  retries: 300
  loop: "{{ war_download_result.results }}"

- name: Setup common loader
  become: true
  become_user: "{{ username }}"
  failed_when: false
  lineinfile:
    path: "{{ tomcat_config_dir }}/conf/catalina.properties"
    regexp: '^common.loader='
    line: "common.loader=\"/etc/opt/alfresco/content-services/classpath\",\"${catalina.base}/lib\",\"${catalina.base}/lib/*.jar\",\"{{ content_folder }}/web-server/lib\",\"{{ content_folder }}/web-server/lib/*.jar\",\"${catalina.home}/lib\",\"${catalina.home}/lib/*.jar\""

- name: Add alfresco-content.service
  become: true
  become_user: root
  template:
    src: alfresco-content.service
    dest: /etc/systemd/system/alfresco-content.service
    owner: "{{ username }}"
    group: "{{ group_name }}"
  notify: alfresco-content-restart

- name: Add PostResources to alfresco.xml
  become: true
  become_user: root
  lineinfile:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/alfresco.xml"
    regexp: '<PostResources base='
    line: '<PostResources base="/opt/alfresco/modules/acs-platform"'

- name: Add PostResources to share.xml
  become: true
  become_user: root
  lineinfile:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/share.xml"
    regexp: '<PostResources base='
    line: '<PostResources base="/opt/alfresco/modules/acs-share"'

- name: Ensure tomcat restarted
  systemd:
    name: tomcat.service
    state: started

- name: Ensure alfresco content service enabled on boot
  systemd:
    name: alfresco-content.service
    state: stopped
    enabled: true

- name: Notify alfresco content service
  wait_for:
    host: "{{ db_host_connect }}"
    port: 5432
  notify: alfresco-content-start
