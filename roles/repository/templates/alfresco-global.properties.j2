{% if acs.version is version('7.0.0', '>=') %}
deployment.method=ANSIBLE
{% endif %}

{% if repo_db_url == "" %}
db.url=jdbc:postgresql://${db.host}:{{ ports_cfg.postgres.sql }}/{{ repo_db_name }}
db.host={{ db_host }}
{% else %}
db.url={{ repo_db_url }}
{% endif %}

db.driver={{ repo_db_driver }}
db.username={{ repo_db_username }}
db.password={{ repo_db_password }}

alfresco.host={% if fqdn_alfresco %}{{ fqdn_alfresco }}{% else %}{{ nginx_host }}{% endif %}

alfresco.port={% if use_ssl | bool %}{{ ports_cfg.nginx.https }}{% else %}{{ ports_cfg.nginx.http }}{% endif %}

alfresco.protocol={% if use_ssl | bool %}https{% else %}http{% endif %}

share.host={% if fqdn_alfresco %}{{ fqdn_alfresco }}{% else %}{{ nginx_host }}{% endif %}

share.port={% if use_ssl | bool %}{{ ports_cfg.nginx.https }}{% else %}{{ ports_cfg.nginx.http }}{% endif %}

share.protocol={% if use_ssl | bool %}https{% else %}http{% endif %}

{% if groups['search'] | default([]) | length >= 1 %}
index.subsystem.name=solr6
solr.secureComms={% if acs.version is version('7.2.0', '>=') %}secret{% else %}none{% endif +%}
solr.port={{ ports_cfg.search.http }}
solr.host={{ solr_host }}
{% elif groups['search_enterprise'] | default([]) | length >= 1 %}
index.subsystem.name=elasticsearch
elasticsearch.createIndexIfNotExists=true
elasticsearch.indexName=alfresco
elasticsearch.host={{ elasticsearch_host }}
elasticsearch.port={{ ports_cfg.elasticsearch.http }}
{% else %}
index.subsystem.name=noindex
{% endif %}

dir.root={{ content_data_folder }}/content
{% if acs.version is version('7.0.0', '<') %}
dir.keystore={{ content_data_folder }}/keystore
{% elif use_custom_keystores %}

{% else %}
encryption.keystore.location={{ content_data_folder }}/keystore/keystore
encryption.keystore.keyMetaData.location={{ content_data_folder }}/keystore/keystore-passwords.properties
encryption.keyAlgorithm=DESede
encryption.cipherAlgorithm=DESede/CBC/PKCS5Padding
encryption.keystore.type=JCEKS
encryption.keystore.backup.type=JCEKS
{% endif %}

dir.license.external={{ settings_folder }}/licenses

alfresco.cluster.enabled={% if groups['repository'] | length > 1 and not cluster_keepoff %}true{% else %}false{% endif %}

transform.service.enabled=true
local.transform.service.enabled=true
transform.service.url=http://{{ trouter_host }}:{{ ports_cfg.transformers.trouter }}
localTransform.core-aio.url=http://{{ ats_tengine_aio_host }}:{{ ports_cfg.transformers.tengine }}/
alfresco-pdf-renderer.url=${localTransform.core-aio.url}
jodconverter.url=${localTransform.core-aio.url}
img.url=${localTransform.core-aio.url}
tika.url=${localTransform.core-aio.url}
transform.misc.url=${localTransform.core-aio.url}
sfs.url=http://{{ sfs_host }}:{{ ports_cfg.sfs.http }}/

messaging.broker.url=failover:({{ activemq_protocol }}://{{ activemq_host }}:{{ ports_cfg.activemq.openwire }})?timeout=3000
messaging.broker.username={{ activemq_username }}
messaging.broker.password={{ activemq_password }}

dsync.service.uris={% if use_ssl | bool %}https{% else %}http{% endif %}://{% if fqdn_alfresco %}{{ fqdn_alfresco }}{% else %}{{ nginx_host }}{% endif %}:{% if use_ssl | bool %}{{ ports_cfg.nginx.https }}{% else %}{{ ports_cfg.nginx.http }}{% endif %}/alfresco

aos.baseUrlOverwrite={% if use_ssl | bool %}https{% else %}http{% endif %}://{% if fqdn_alfresco %}{{ fqdn_alfresco }}{% else %}{{ nginx_host }}{% endif %}:{% if use_ssl | bool %}{{ ports_cfg.nginx.https }}{% else %}{{ ports_cfg.nginx.http }}{% endif %}/alfresco/aos

# CSRF filter overrides
{% import 'xorigins_macros.j2' as _xorigins_protection %}
csrf.filter.enabled={% if csrf.enabled | bool %}true
{% if csrf.urls -%}
  csrf.filter.referer={{ _xorigins_protection.compute(inventory_hostname, 'referer', csrf.urls) }}
  csrf.filter.origin={{ _xorigins_protection.compute(inventory_hostname, 'origin', csrf.urls) }}
{% endif %}
csrf.filter.referer.always={{ 'true' if 'origin' in csrf.force_headers | lower else 'false' }}
csrf.filter.origin.always={{ 'true' if 'referer' in csrf.force_headers | lower else 'false' }}
{% else -%}
  false
{% endif %}

# CORS filter overrides
cors.enabled={% if cors.enabled | bool %}true
{% if cors.urls -%}
  cors.allowed.origins={{ _xorigins_protection.compute(inventory_hostname, 'origin', cors.urls) }}
{% endif %}
cors.allowed.methods={{ cors.allowed_methods | default([]) | join(',') }}
cors.allowed.headers={{ cors.allowed_headers | default([]) | join(',') }}
cors.exposed.headers={{ cors.exposed_headers | default([]) | join(',') }}
cors.support.credentials={{ cors.support_credentials | default('true') }}
cors.preflight.maxage={{ cors.preflight_maxage | default('10') }}
{% else -%}
  false
{% endif %}

{% for prop in lookup('ansible.utils.to_paths', merged_repository_properties) | dict2items %}
{{ prop.key }}={{ prop.value }}
{% endfor %}
