---
# tasks file for transform-services
- name: ensure a list of packages installed
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ utils }}"

- name: Create temp dir
  file:
    path: "{{ temp_dir }}"
    state: directory
    mode: 'u=rwx,g=rwx,o=rx'
  become: true
  become_user: "{{ username }}"

- name: Check if ImageMagick is installed
  command: 
    cmd: "convert --version"
  register: magick_exists
  failed_when: false
  changed_when: magick_exists.rc != 0

- name: Download imagemagick-distribution-linux.rpm
  get_url:
    url: "{{ IMAGEMAGICK_RPM_URL }}"
    dest: "{{ temp_dir }}/imagemagick-distribution-linux.rpm"
    mode: 0444
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    timeout: 600
  register: download_img_dist
  until: download_img_dist is succeeded
  when: magick_exists.rc != 0

- name: Download imagemagick-distribution-libs-linux.rpm
  get_url:
    url: "{{ IMAGEMAGICK_LIB_RPM_URL }}"
    dest: "{{ temp_dir }}/imagemagick-distribution-libs-linux.rpm"
    mode: 0444
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    timeout: 600
  register: download_img_libs_dist
  until: download_img_libs_dist is succeeded
  when: magick_exists.rc != 0

- name: Download ImageMagick-license.txt
  get_url:
    url: "{{ IMAGEMAGICK_LICENSE_FILE }}"
    dest: "{{ temp_dir }}/ImageMagick-license.txt"
    mode: 0444
    timeout: 600
  when: magick_exists.rc != 0

- name: Download imagemagick-epel-dep.rpm
  get_url:
    url: "{{ IMAGEMAGICK_DEP_RPM_URL }}"
    dest: "{{ temp_dir }}/imagemagick-epel-dep.rpm"
    mode: 0444
    timeout: 600
  register: download_img_epel_dep
  until: download_img_epel_dep is succeeded
  when: magick_exists.rc != 0

- name: install imagemagick-epel-dep
  yum:
    name: "{{ temp_dir }}/imagemagick-epel-dep.rpm"
    state: present
  when: download_img_epel_dep is succeeded

- name: install imagemagick-distribution-libs
  yum:
    name: "{{ temp_dir }}/imagemagick-distribution-libs-linux.rpm"
    state: present
  when: download_img_libs_dist is succeeded

- name: install imagemagick-distribution
  yum:
    name: "{{ temp_dir }}/imagemagick-distribution-linux.rpm"
    state: present
  when: download_img_dist is succeeded

- name: Check if LibreOffice exists
  command:
    cmd: "/opt/libreoffice6.3/program/soffice --version"
  register: loffice_exists
  failed_when: false
  changed_when: loffice_exists.rc != 0

- name: Download libreoffice-dist-{{ LIBREOFFICE_VERSION }}-linux.gz
  get_url:
    url: "{{ LIBREOFFICE_RPM_URL }}"
    dest: "{{ temp_dir }}/libreoffice-dist-linux.gz"
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    mode: 0444
    timeout: 600
  register: libreoffice_download
  until: libreoffice_download is succeeded
  when: loffice_exists.rc != 0

- name: Download libreoffice.txt
  get_url:
    url: "{{ LIBREOFFICE_LICENSE_FILE }}"
    dest: "{{ temp_dir }}/libreoffice.txt"
    mode: 0444
    timeout: 600
  when: loffice_exists.rc != 0

- name: Extract libreoffice-dist-linux.gz
  become: yes
  unarchive:
    src: "{{ temp_dir }}/libreoffice-dist-linux.gz"
    dest: "{{ temp_dir }}/"
    remote_src: yes
  when: loffice_exists.rc != 0

- name: install LibreOffice
  shell: "yum localinstall -y {{ temp_dir }}/LibreOffice*/RPMS/*.rpm"
  args:
    warn: false
  when: loffice_exists.rc != 0
  changed_when: false

- name: Check if alfresco-pdf-rendere exe or archive exists
  block:
    - name: Check if alfresco-pdf-renderer exists
      stat:
        path: "{{ content_folder }}/alfresco-pdf-renderer/alfresco-pdf-renderer"
      register: alfresco_pdf_renderer_exists
    - name: Check if alfresco-pdf-renderer archive exists
      stat:
        path: "{{ content_folder }}/alfresco-pdf-renderer/alfresco-pdf-renderer-{{ PDF_RENDERER_VERSION }}-linux.tgz"
      register: alfresco_pdf_renderer_tgz_exists

- name: Download alfresco-pdf-renderer-linux.tgz
  become_user: "{{ username }}"
  get_url:
    url: "{{ ALFRESCO_PDF_RENDERER_LIB_RPM_URL }}"
    dest: "{{ content_folder }}/alfresco-pdf-renderer/alfresco-pdf-renderer-{{ PDF_RENDERER_VERSION }}-linux.tgz"
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    mode: 'u=rwx,g=rwx,o=rx'
    timeout: 600
  register: download_pdf_renderer
  until: download_pdf_renderer is succeeded
  when: not alfresco_pdf_renderer_tgz_exists.stat.exists and not alfresco_pdf_renderer_exists.stat.exists

- name: Extract alfresco-pdf-renderer-linux.tgz
  become_user: "{{ username }}"
  unarchive:
    src: "{{ content_folder }}/alfresco-pdf-renderer/alfresco-pdf-renderer-{{ PDF_RENDERER_VERSION }}-linux.tgz"
    dest: "{{ content_folder }}/alfresco-pdf-renderer/"
    remote_src: yes
  when: not alfresco_pdf_renderer_exists.stat.exists

- name: Remove alfresco-pdf-renderer-linux.tgz
  file:
    path: "{{ content_folder }}/alfresco-pdf-renderer/alfresco-pdf-renderer-{{ PDF_RENDERER_VERSION }}-linux.tgz"
    state: absent

- name: Download alfresco-transform-core-aio-boot-{{ transform.version }}.jar
  block:
    - name: Create transform services folder
      file:
        path: "{{ binaries_folder }}/transform-service-{{ transform.version }}"
        state: directory
    - name: Download artefact
      get_url:
        url: "{{ nexus_repository.releases }}/org/alfresco/alfresco-transform-core-aio-boot/{{ transform.version }}/alfresco-transform-core-aio-boot-{{ transform.version }}.jar"
        dest: "{{ binaries_folder }}/transform-service-{{ transform.version }}/alfresco-transform-core-aio-boot-{{ transform.version }}.jar"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
        url_username: "{{ nexus_user }}"
        url_password: "{{ nexus_password }}"
        timeout: 600
      register: download_result
      until: download_result is succeeded

- name: Add paths to setenv file
  become_user: "{{ username }}"
  blockinfile:
    path: "{{ config_folder }}/setenv.sh"
    block: |
      export LIBREOFFICE_HOME={{ libreoffice_home }}
      export IMAGEMAGICK_HOME={{ imagemagick_home }}
      export IMAGEMAGICK_DYN=/usr/lib64
      export IMAGEMAGICK_CONFIG=${IMAGEMAGICK_HOME}/config-Q16HDRI
      export IMAGEMAGICK_CODERS=${IMAGEMAGICK_HOME}/modules-Q16HDRI/coders
      export IMAGEMAGICK_EXE=/usr/bin/magick
      export IMAGEMAGICK_EXE=/usr/bin/convert
      export ATS_VERSION={{ transform.version }}
      export ATS_HOME={{ binaries_folder }}/transform-service-${ATS_VERSION}
      export ATS_TENGINE_AIO_HOST={{ ats_tengine_aio_host }}
  changed_when: false

- name: Map env variables to Java and Tomcat
  become_user: "{{ username }}"
  lineinfile:
    path: "{{ binaries_folder }}/tomcat.sh"
    insertafter: EOF
    line: "export CATALINA_OPTS=\"${CATALINA_OPTS} -Dats-tengine-aio.host=${ATS_TENGINE_AIO_HOST}\""

- name: Add properties to alfresco-global
  become_user: "{{ username }}"
  blockinfile:
    path: "{{ settings_folder }}/classpath/alfresco-global.properties"
    block: |
      local.transform.service.enabled=true
      localTransform.core-aio.url=http://{{ ats_tengine_aio_host }}:8090
      legacy.transform.service.enabled=true
      alfresco-pdf-renderer.url=${localTransform.core-aio.url}
      jodconverter.url=${localTransform.core-aio.url}
      img.url=${localTransform.core-aio.url}
      tika.url=${localTransform.core-aio.url}
      transform.misc.url=${localTransform.core-aio.url}

- name: Check if AIO script exists
  stat:
    path: "{{ binaries_folder }}/ats-ate-aio.sh"
  register: aio_script
  failed_when: false

- name: Add AIO startup script
  become_user: "{{ username }}"
  template:
    src: ats-ate-aio.sh
    dest: "{{ binaries_folder }}/ats-ate-aio.sh"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'
    force: no
  when: not aio_script.stat.exists

- name: Check existence of transform services
  block:
  - name: Check if alfresco-tengine-aio.service exists
    stat:
      path: "/etc/systemd/system/alfresco-tengine-aio.service"
    register: alfresco_tengine_aio_service
  - name: Check if alfresco-transform.service exists
    stat:
      path: "/etc/systemd/system/alfresco-transform.service"
    register: alfresco_transform_service

- name: Add alfresco-tengine-aio service
  become_user: "{{ username }}"
  template:
    src: alfresco-tengine-aio.service
    dest: "/etc/systemd/system/alfresco-tengine-aio.service"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'
    force: no
  notify: restart-aio
  when: not alfresco_tengine_aio_service.stat.exists

- name: Add alfresco-transform service
  become_user: "{{ username }}"
  template:
    src: alfresco-transform.service
    dest: "/etc/systemd/system/alfresco-transform.service"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'
    force: no
  notify: restart-transform
  when: not alfresco_transform_service.stat.exists

- name: clean all
  command: yum clean all
  args:
    warn: false
  changed_when: false

- name: Enable AIO service
  systemd:
    name: alfresco-tengine-aio.service
    enabled: true

- name: Ensure transform service is started and enabled on boot
  systemd:
    name: alfresco-transform.service
    state: started
    enabled: true
