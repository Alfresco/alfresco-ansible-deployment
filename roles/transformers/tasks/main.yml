---
# tasks file for transformers
- name: Include OS specific variables
  include_vars: "{{ item }}"
  loop: "{{ lookup('first_found', os_fallback, errors='ignore', wantlist=True) }}"

- name: Download libreoffice package archive
  get_url:
    url: "{{ libreoffice_archive }}"
    checksum: sha1:{{ libreoffice_archive_sha1_checksum }}
    dest: "{{ download_location }}/libreoffice.tar.gz"
    timeout: 950
  register: libreoffice_download
  async: 900
  poll: 0

- name: Download ImageMagick distribution
  vars:
    pkg_name: "{{ item | replace('imagemagick-distribution', 'imagemagick-distribution-' + imagemagick_pkg.version) }}.{{ pkg_format }}"
    pkg_url: "{{ nexus_repository.releases }}/../imagemagick/imagemagick-distribution/{{ imagemagick_pkg.version }}/{{ pkg_name }}"
  get_url:
    url: "{{ pkg_url }}"
    checksum: "sha1:{{ lookup('url', pkg_url + '.sha1') }}"
    dest: "{{ download_location }}/{{ pkg_name }}"
    mode: 0444
    timeout: 570
  loop: "{{  imagemagick_pkg.pkgs }}"

- name: Ensure a list of packages installed
  become: true
  become_user: root
  package:
    name: "{{ item }}"
    state: present
  poll: 0
  loop: "{{ utils_transform }}"

- name: Enable EPEL repository
  yum_repository:
    name: epel
    description: EPEL YUM repo
    metalink: https://mirrors.fedoraproject.org/metalink?repo=epel-{{ ansible_distribution_major_version }}&arch=$basearch&infra=$infra&content=$contentdir
    gpgcheck: yes
    gpgkey: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}
  when: pkg_format != 'deb'

- name: Verifying if libreoffice finished downloading
  async_status:
    jid: "{{ libreoffice_download.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 30
  retries: 20

- name: Extract libreoffice-dist-linux.gz
  become: true
  unarchive:
    src: "{{ download_location }}/libreoffice.tar.gz"
    dest: "{{ download_location }}/"
    remote_src: true
    creates: "{{ download_location }}/LibreOffice_{{ libreoffice }}_{{ ansible_system }}_{{ ansible_architecture | replace('_','-') }}_{% if ansible_pkg_mgr == 'apt'%}deb{% else %}rpm{% endif %}/{% if ansible_pkg_mgr == 'apt'%}DEBS{% else %}RPMS{% endif %}/"

- name: Install LibreOffice & imageMagick
  include_tasks: "{{ pkg_format }}-packages.yml"

- name: Create transform-services folder
  file:
    path: "{{ ats_home }}"
    state: directory
    mode: 'u=rwx,g=rwx,o=rx'
    owner: "{{ username }}"
    group: "{{ group_name }}"

- name: Download alfresco-pdf-renderer-linux.tgz
  become: true
  get_url:
    url: "{{ alfresco_pdf_renderer }}"
    checksum: sha1:{{ alfresco_pdf_renderer_sha1_checksum }}
    dest: "{{ download_location }}/alfresco-pdf-renderer-{{ pdf_renderer }}-linux.tgz"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'
    timeout: 570

- name: Extract alfresco-pdf-renderer-linux.tgz
  become: true
  unarchive:
    src: "{{ download_location }}/alfresco-pdf-renderer-{{ pdf_renderer }}-linux.tgz"
    dest: "{{ ats_home }}"
    remote_src: true
    owner: "{{ username }}"
    group: "{{ group_name }}"
    creates: "{{ ats_home }}/alfresco-pdf-renderer"

- name: Remove alfresco-pdf-renderer-linux.tgz
  block:
  - name: Remove from content services
    file:
      path: "{{ binaries_folder }}/content-services-{{ acs.version }}/alfresco-pdf-renderer/alfresco-pdf-renderer-{{ pdf_renderer }}-linux.tgz"
      state: absent

- name: Download alfresco-transform-core-aio-boot-{{ transform.version }}.jar
  get_url:
    url: "{{ downloads.transform_jar_url }}"
    dest: "{{ binaries_folder }}/transform-service/alfresco-transform-core-aio-boot-{{ transform.version }}.jar"
    checksum: "sha1:{{ downloads.transform_jar_sha1_checksum }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    timeout: 570

- name: Add paths to setenv file
  become: true
  block:
  - name: Add ats common vars to setenv file
    blockinfile:
      path: "{{ config_folder }}/setenv.sh"
      marker: "# {mark} ATS COMMON ENV VARS"
      owner: "{{ username }}"
      group: "{{ group_name }}"
      block: |
        export ATS_HOME={{ binaries_folder }}/transform-service
        export ATS_TENGINE_AIO_HOST={{ ats_tengine_aio_host }}
        export ATS_SHARED_FS_HOST={{ sfs_host }}
      insertafter: EOF
  - name: Add ats dependencies vars to setenv file
    blockinfile:
      path: "{{ config_folder }}/setenv.sh"
      marker: "# {mark} ATS DEPENDENCIES ENV VARS"
      owner: "{{ username }}"
      group: "{{ group_name }}"
      block: |
        export LIBREOFFICE_HOME={{ libreoffice_home }}
        export IMAGEMAGICK_HOME={{ imagemagick_home }}
        export IMAGEMAGICK_DYN={% if pkg_format == 'deb' %}${IMAGEMAGICK_HOME}/lib/x86_64-linux-gnu{% else %}/usr/lib64{% endif %}/
        export IMAGEMAGICK_CONFIG={% if pkg_format == 'deb' %}${IMAGEMAGICK_DYN}ImageMagick-{{ imagemagick_pkg.version.split('-')[0] }}{% else %}${IMAGEMAGICK_HOME}{% endif %}/config-Q16HDRI
        export IMAGEMAGICK_CODERS={% if pkg_format == 'deb' %}${IMAGEMAGICK_DYN}ImageMagick-{{ imagemagick_pkg.version.split('-')[0] }}{% else %}${IMAGEMAGICK_HOME}{% endif %}/modules-Q16HDRI/coders
        export IMAGEMAGICK_EXE="{% if pkg_format == 'deb' %}${IMAGEMAGICK_HOME}/bin/{% endif %}convert"
      insertafter: EOF

- name: Create log file with correct permissions
  become: true
  file:
    path: "{{ logs_folder }}/ats-ate-aio.log"
    state: touch
    mode: u=rwx,g=rw,o-rwx
    owner: "{{ username }}"
    group: "{{ group_name }}"
  changed_when: false

- name: Add AIO startup script
  become: true
  template:
    src: ats-ate-aio.sh
    dest: "{{ binaries_folder }}/ats-ate-aio.sh"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'
    force: true
  notify:
    - get-services
    - wait-for-activemq
    - restart-aio

- name: Add alfresco-tengine-aio service
  become: true
  template:
    src: alfresco-tengine-aio.service
    dest: "/etc/systemd/system/alfresco-tengine-aio.service"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rw,g=rw,o=r'
    force: true
  notify:
    - get-services
    - wait-for-activemq
    - enable-aio
    - start-aio
    - restart-aio
