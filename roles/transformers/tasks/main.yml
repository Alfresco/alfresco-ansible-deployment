---
# vars file for transformers
- name: Include OS specific variables
  include_vars: "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"

- name: Ensure a list of packages installed
  become: true
  become_user: root
  package:
    name: "{{ item }}"
    state: present
  poll: 0
  loop: "{{ utils_transform }}"

- name: Enable EPEL repository
  yum_repository:
    name: epel
    description: EPEL YUM repo
    metalink: https://mirrors.fedoraproject.org/metalink?repo=epel-$releasever&arch=$basearch&infra=$infra&content=$contentdir
    gpgcheck: yes
    gpgkey: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}

- name: Download imagemagick-distribution-linux.rpm
  get_url:
    url: "{{ imagemagick_rpm }}"
    checksum: sha1:{{ imagemagick_sha1_checksum }}
    dest: "{{ download_location }}/imagemagick-distribution-linux.rpm"
    mode: 0444
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    timeout: 570

- name: Download imagemagick-distribution-libs-linux.rpm
  get_url:
    url: "{{ imagemagick_lib_rpm }}"
    checksum: sha1:{{ imagemagick_lib_sha1_checksum }}
    dest: "{{ download_location }}/imagemagick-distribution-libs-linux.rpm"
    mode: 0444
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    timeout: 570

- name: install imagemagick
  yum:
    name: "{{ download_location }}/imagemagick-distribution-libs-linux.rpm"
    state: present
    disable_gpg_check: true
  loop:
    - imagemagick-distribution-libs-linux.rpm
    - imagemagick-distribution-linux.rpm

- name: Check if LibreOffice exists
  command:
    cmd: "{{ libreoffice_home }}/program/soffice --version"
  register: loffice_exists
  failed_when: false
  changed_when: loffice_exists.rc != 0

- name: "Download libreoffice {{ libreoffice }} rpm tar.gz"
  get_url:
    url: "{{ libreoffice_rpm }}"
    dest: "{{ download_location }}/libreoffice.tar.gz"
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    mode: 0444
    timeout: 950
  register: libreoffice_download
  async: 900
  poll: 0
  when: loffice_exists.rc != 0

- name: Verifying if libreoffice finished downloading
  become: true
  become_user: root
  async_status:
    jid: "{{ libreoffice_download.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 30
  retries: 30
  when: loffice_exists.rc != 0

- name: Extract libreoffice-dist-linux.gz
  become: true
  unarchive:
    src: "{{ download_location }}/libreoffice.tar.gz"
    dest: "{{ download_location }}/"
    remote_src: true
  when: loffice_exists.rc != 0

- name: install LibreOffice
  shell: "yum localinstall -y {{ download_location }}/LibreOffice*/RPMS/*.rpm"
  args:
    warn: false
  when: loffice_exists.rc != 0
  changed_when: false

- name: Create transform-services folder
  file:
    path: "{{ ats_home }}"
    state: directory
    mode: 'u=rwx,g=rwx,o=rx'
    owner: "{{ username }}"
    group: "{{ group_name }}"

- name: Check if alfresco-pdf-renderer exe or archive exists
  block:
    - name: Check if alfresco-pdf-renderer exists
      stat:
        path: "{{ ats_home }}/alfresco-pdf-renderer"
      register: alfresco_pdf_renderer_exists
    - name: Check if alfresco-pdf-renderer archive exists
      stat:
        path: "{{ download_location }}/alfresco-pdf-renderer-{{ pdf_renderer }}-linux.tgz"
      register: alfresco_pdf_renderer_tgz_exists

- name: Download alfresco-pdf-renderer-linux.tgz
  block:
    - name: Download alfresco-pdf-renderer-linux.tgz
      become: true
      become_user: "{{ username }}"
      get_url:
        url: "{{ alfresco_pdf_renderer_lib_rpm }}"
        dest: "{{ download_location }}/alfresco-pdf-renderer-{{ pdf_renderer }}-linux.tgz"
        url_username: "{{ nexus_user }}"
        url_password: "{{ nexus_password }}"
        mode: 'u=rwx,g=rwx,o=rx'
        timeout: 570
      register: download_pdf_renderer
      until: download_pdf_renderer is succeeded
      when: not alfresco_pdf_renderer_tgz_exists.stat.exists and not alfresco_pdf_renderer_exists.stat.exists

- name: Extract alfresco-pdf-renderer-linux.tgz
  become: true
  become_user: "{{ username }}"
  unarchive:
    src: "{{ download_location }}/alfresco-pdf-renderer-{{ pdf_renderer }}-linux.tgz"
    dest: "{{ ats_home }}"
    remote_src: true
  when: not alfresco_pdf_renderer_exists.stat.exists

- name: Remove alfresco-pdf-renderer-linux.tgz
  block:
  - name: Remove from content services
    file:
      path: "{{ binaries_folder }}/content-services-{{ acs.version }}/alfresco-pdf-renderer/alfresco-pdf-renderer-{{ pdf_renderer }}-linux.tgz"
      state: absent

- name: Download alfresco-transform-core-aio-boot-{{ transform.version }}.jar
  get_url:
    url: "{{ downloads.transform_jar_url }}"
    dest: "{{ binaries_folder }}/transform-service/alfresco-transform-core-aio-boot-{{ transform.version }}.jar"
    checksum: "sha1:{{ downloads.transform_jar_sha1_checksum }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    timeout: 570
  register: download_result
  until: download_result is succeeded

- name: Check for ATS_HOME in "{{ config_folder }}/setenv.sh"
  shell: cat {{ config_folder }}/setenv.sh | grep ATS_HOME
  register: test_ats_home
  failed_when: false
  changed_when: test_ats_home.rc != 0

- name: Add paths to setenv file
  become: true
  become_user: "{{ username }}"
  blockinfile:
    path: "{{ config_folder }}/setenv.sh"
    marker: "# {mark} ATS ENV VARS"
    block: |
      export LIBREOFFICE_HOME={{ libreoffice_home }}
      export IMAGEMAGICK_HOME={{ imagemagick_home }}
      export IMAGEMAGICK_DYN=/usr/lib64
      export IMAGEMAGICK_CONFIG=${IMAGEMAGICK_HOME}/config-Q16HDRI
      export IMAGEMAGICK_CODERS=${IMAGEMAGICK_HOME}/modules-Q16HDRI/coders
      export IMAGEMAGICK_EXE=/usr/bin/magick
      export IMAGEMAGICK_EXE=/usr/bin/convert
      export ATS_HOME={{ binaries_folder }}/transform-service
      export ATS_TENGINE_AIO_HOST={{ ats_tengine_aio_host }}
      export ATS_SHARED_FS_HOST={{ sfs_host }}
    insertafter: EOF
  when: test_ats_home.rc != 0

- name: Create log file with correct permissions
  become: true
  become_user: "{{ username }}"
  file:
    path: "{{ logs_folder }}/ats-ate-aio.log"
    state: touch
    mode: u=rwx,g=rw,o-rwx
  changed_when: false

- name: Add AIO startup script
  become: true
  become_user: "{{ username }}"
  template:
    src: ats-ate-aio.sh
    dest: "{{ binaries_folder }}/ats-ate-aio.sh"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'
    force: true

- name: Add alfresco-tengine-aio service
  become: true
  template:
    src: alfresco-tengine-aio.service
    dest: "/etc/systemd/system/alfresco-tengine-aio.service"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'
    force: true
  notify: restart-aio

- name: clean all
  command: yum clean all
  args:
    warn: false
  changed_when: false

- name: Getting go_signal tengine-aio service to start
  block:
  - name: Check for activemq "{{ activemq_host }}"
    wait_for:
      host: "{{ activemq_host }}"
      port: 61616
    register: activemq_go

- name: Enable and start AIO service
  systemd:
    name: alfresco-tengine-aio.service
    state: started
    enabled: true
  when: not activemq_go.failed
