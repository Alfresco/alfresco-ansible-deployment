---
# tasks file for central
- name: Include nexus credentials for local testing
  include_vars: "nexus.yml"
  failed_when: false

- name: Include host var file
  include_vars: "hosts.yml"
  failed_when: false

- name: ensure a list of packages installed
  become: true
  package:
    name: "{{ item }}"
    state: present
  poll: 0
  loop: "{{ utils }}"

- name: "Check existence of {{ group_name }} group"
  shell: "cat /etc/group | grep {{ group_name }}"
  register: group_presence
  failed_when: false
  changed_when: group_presence.rc != 0

- name: "Create {{ group_name }} group"
  group:
      name: "{{ group_name }}"
      gid: "{{ group_id }}"
  when: group_presence.rc != 0

- name: "Check existence of {{ username }} user"
  command: "id -u {{ username }}"
  register: user_presence
  failed_when: false
  changed_when: user_presence.rc != 0

- name: "Create {{ username }} user"
  user:
    name: "{{ username }}"
    comment: "{{ username }} user"
    uid: "{{ user_id }}"
    group: "{{ group_name }}"
  when: user_presence.rc != 0

- name: "Check for binaries folder"
  stat:
    path: '{{ binaries_folder }}'
  register: binaries_exists
  failed_when: false

- name: Create binaries folder
  file:
    path: "{{ binaries_folder }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ group_name }}"
    recurse: yes
    mode: 'u=rwx,g=rwx,o=rx'
  when: not binaries_exists.stat.exists

- name: "Check for configuration folder"
  stat:
    path: '{{ config_folder }}'
  register: config_exists
  failed_when: false

- name: Create configuration folder
  file:
    path: "{{ config_folder }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ group_name }}"
    recurse: yes
    mode: 'u=rwx,g=rwx,o=rx'
  when: not config_exists.stat.exists

- name: "Check for data folder"
  stat:
    path: '{{ data_folder }}'
  register: data_exists
  failed_when: false

- name: Create data folder
  file:
    path: "{{ data_folder }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ group_name }}"
    recurse: yes
    mode: 'u=rwx,g=rwx,o=rx'
  when: not data_exists.stat.exists

- name: "Check for logs folder"
  stat:
    path: '{{ logs_folder }}'
  register: logs_exists
  failed_when: false

- name: Create logs folder
  file:
    path: "{{ logs_folder }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ group_name }}"
    recurse: yes
    mode: 'u=rwx,g=rwx,o=rx'
  when: not logs_exists.stat.exists

- name: Disable SELinux at next reboot
  selinux:
    state: disabled

- name: Set SELinux in permissive mode until the machine is rebooted
  command: setenforce 0
  ignore_errors: true
  changed_when: false