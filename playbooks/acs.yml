---
- name: Check if current OS version is in the supported matrix
  hosts: all:!external
  gather_facts: true
  tasks:
    - name: Compare host OS with supported matrix
      vars:
        os_versions: "{{ supported_os[ansible_distribution].versions | default([]) }}"
      ansible.builtin.fail:
        msg:
          - "{{ ansible_distribution }} {{ ansible_distribution_version }} is not a supported OS"
      when:
        - not (skip_os_test | default(false) | bool)
        - ansible_distribution_version | float not in os_versions

- name: Populate facts
  ansible.builtin.import_playbook: facts.yml

- name: Run preliminary checks
  ansible.builtin.import_playbook: prerun-checks.yml

- name: Handle secrets
  ansible.builtin.import_playbook: secrets.yml

- name: Generate hosts certificates
  vars:
    p12_passphrase: "{{ hostvars.localhost.certs_p12_passphrase }}"
    secret_ca_passphrase: "{{ hostvars.localhost.ca_signing_key_passphrase }}"
  ansible.builtin.import_playbook: pki.yml
  when:
    - ats_mtls_required
    - ats_mtls_capable

- name: Populate common facts
  hosts: repository:identity:acc:adw
  gather_facts: false
  roles:
    - role: "../roles/common"
  tasks:
    - name: Set alfresco_url from first entry of known_urls
      vars:
        first_known_url: "{{ known_urls | first | default('http://' ~ nginx_host) }}"
      ansible.builtin.set_fact:
        alfresco_url: "{{ first_known_url | urlsplit('scheme') }}://{{ first_known_url | urlsplit('hostname') }}"
    - name: Populate identity_enabled
      ansible.builtin.set_fact:
        identity_enabled: "{{ ((groups.identity | default([])) + (groups.external_identity | default([]))) | length > 0 }}"
    - name: Populate identity_url when available
      when: identity_enabled
      ansible.builtin.set_fact:
        identity_url: "{{ alfresco_url }}/auth"

- name: Database Role
  hosts: database[0]
  gather_facts: false
  vars:
    pg_role: "../roles/postgres"
    create_repo_db: >-
      {{ repo_db_url == "" | ansible.builtin.bool }}
    create_sync_db: >-
      {{ (sync_db_url == "" and groups.syncservice | default([]) | length > 0) | ansible.builtin.bool }}
  tasks:
    - name: Install Postgres
      ansible.builtin.include_role:
        name: "{{ pg_role }}"
      when: create_repo_db or create_sync_db
    - name: Setup repository database
      ansible.builtin.include_role:
        name: "{{ pg_role }}"
        tasks_from: setup_db
      vars:
        postgres_db_name: "{{ repo_db_name }}"
        postgres_db_username: "{{ repo_db_username }}"
        postgres_db_password: "{{ repo_db_password }}"
        postgres_db_clients: "{{ groups.repository }}"
      when: create_repo_db
    - name: Setup sync database
      ansible.builtin.include_role:
        role: "{{ pg_role }}"
        tasks_from: setup_db
      vars:
        postgres_db_name: "{{ sync_db_name }}"
        postgres_db_username: "{{ sync_db_username }}"
        postgres_db_password: "{{ sync_db_password }}"
        postgres_db_clients: "{{ groups.syncservice }}"
      when: create_sync_db
  post_tasks:
    - name: Make sure PostgreSQL is running
      ansible.builtin.service:
        name: "{{ postgresql_service }}"
        state: started
      when: create_repo_db or create_sync_db
  tags:
    - database

- name: Activemq Role
  hosts: activemq
  gather_facts: false
  roles:
    - role: "../roles/activemq"
      activemq_version: "{{ dependencies_version.activemq }}"
      when: not groups.external_activemq | default([])
  tags:
    - activemq

- name: Elasticsearch Role
  hosts: elasticsearch
  gather_facts: false
  roles:
    - role: "../roles/elasticsearch"
      when: acs.edition == "Enterprise" and not groups.external_elasticsearch | default([])
  tags:
    - elasticsearch

- name: Nginx Role
  hosts: nginx
  gather_facts: false
  roles:
    - role: "../roles/nginx"
  post_tasks:
    - name: Make sure NGINX is running
      become: true
      ansible.builtin.service:
        name: nginx
        state: started
  tags:
    - nginx

- name: Identity Role
  hosts: identity
  gather_facts: false
  roles:
    - role: "../roles/identity"
      identity_admin_username: admin
      identity_admin_password: "{{ hostvars.localhost.identity_admin_password }}"
      identity_keycloak_http_port: "{{ ports_cfg.identity.http }}"
      when: not groups.external_identity | default([])
  tasks:
    - name: Configure Realm
      vars:
        identity_admin_username: admin
        identity_admin_password: "{{ hostvars.localhost.identity_admin_password }}"
        identity_keycloak_http_port: "{{ ports_cfg.identity.http }}"
        identity_known_urls:
          - "{{ alfresco_url }}"
      ansible.builtin.include_role:
        name: "../roles/identity"
        tasks_from: realm
  tags:
    - identity

- name: Transformers Role
  hosts: transformers
  gather_facts: false
  pre_tasks:
    - name: Build keystore role argument
      ansible.builtin.set_fact:
        transformers_keystore:
          path: "{{ config_folder }}/pki/{{ inventory_hostname }}.keystore"
          pass: "{{ hostvars.localhost.certs_p12_passphrase }}"
          type: JCEKS
          cert_containers:
            - path: "{{ hostvars.localhost.pki_dir }}/certificates/{{ inventory_hostname }}.p12"
              pass: "{{ hostvars.localhost.certs_p12_passphrase }}"
              add_to_trusted_ca: true
      when:
        - ats_mtls_required
        - ats_mtls_capable
  roles:
    - role: "../roles/transformers"
      ats_keystore: "{{ transformers_keystore | default({}) }}"
  post_tasks:
    - name: Update installation status file with Transformers
      become: true
      vars:
        transform_components:
          transform: "{{ transform }}"
      ansible.builtin.blockinfile:
        block: "{{ transform_components | to_nice_yaml(indent=2) }}"
        create: true
        path: "{{ ansible_installation_status_file }}"
        marker_begin: TRANSFORM_BEGIN
        marker_end: TRANSFORM_END
        mode: "0755"
  tags:
    - transformers

- name: Alfresco Search Role
  hosts: search
  gather_facts: true
  roles:
    - role: ../roles/search
      search_version: "{{ search.version }}"
      search_flavor: >-
        {{ 'alfresco-insight-engine' if 'insight-engine' in search.artifact_name else 'alfresco-search-services' }}
      search_master_hostname: "{{ solr_host }}"
      search_shared_secret: "{{ reposearch_shared_secret }}"
      alfresco:
        host: "{{ nginx_host }}"
        port: "{{ ports_cfg.nginx.http }}"
        port_ssl: "{{ ports_cfg.nginx.https }}"
      search_topology: >-
        {% if groups.search | length > 1 %}replication
        {%- else %}standalone
        {%- endif %}
  post_tasks:
    - name: Make sure Solr is running
      become: true
      ansible.builtin.service:
        name: alfresco-search
        state: started
    - name: Update installation status file with  Search
      become: true
      vars:
        search_components:
          search: "{{ search }}"
      ansible.builtin.blockinfile:
        block: "{{ search_components | to_nice_yaml(indent=2) }}"
        create: true
        path: "{{ ansible_installation_status_file }}"
        marker_begin: SEARCH_BEGIN
        marker_end: SEARCH_END
        mode: "0755"
  tags:
    - search

- name: Alfresco Repository Role
  hosts: repository
  gather_facts: false
  pre_tasks:
    - name: Build keystore role argument
      ansible.builtin.set_fact:
        repository_keystore:
          path: "{{ config_folder }}/pki/{{ inventory_hostname }}.keystore"
          pass: "{{ hostvars.localhost.certs_p12_passphrase }}"
          type: JCEKS
          cert_containers:
            - path: "{{ hostvars.localhost.pki_dir }}/certificates/{{ inventory_hostname }}.p12"
              pass: "{{ hostvars.localhost.certs_p12_passphrase }}"
              add_to_trusted_ca: true
      when:
        - ats_mtls_required
        - ats_mtls_capable
  roles:
    - role: "../roles/repository"
      repo_keystore: "{{ repository_keystore | default({}) }}"
      repository_properties: "{{ global_properties }}"
      raw_properties: "{{ properties_snippets }}"
      repository_identity_url: "{{ identity_url | default('') }}"
  post_tasks:
    - name: Update installation status file with ACS
      become: true
      vars:
        acs_components:
          acs: "{{ acs }}"
          amps: "{{ amps }}"
          api_explorer: "{{ api_explorer }}"
      ansible.builtin.blockinfile:
        block: "{{ acs_components | to_nice_yaml(indent=2) }}"
        create: true
        path: "{{ ansible_installation_status_file }}"
        marker_begin: ACS_BEGIN
        marker_end: ACS_END
        mode: "0755"
  tags:
    - repository

- name: T-Router Role
  hosts: transformers
  gather_facts: false
  pre_tasks:
    - name: Build keystore role argument
      ansible.builtin.set_fact:
        trouter_keystore:
          path: "{{ config_folder }}/pki/{{ inventory_hostname }}.keystore"
          pass: "{{ hostvars.localhost.certs_p12_passphrase }}"
          type: JCEKS
          cert_containers:
            - path: "{{ hostvars.localhost.pki_dir }}/certificates/{{ inventory_hostname }}.p12"
              pass: "{{ hostvars.localhost.certs_p12_passphrase }}"
              add_to_trusted_ca: true
      when:
        - ats_mtls_required
        - ats_mtls_capable
  roles:
    - role: "../roles/trouter"
      ats_keystore: "{{ trouter_keystore | default({}) }}"
      when: acs.edition == "Enterprise"
  post_tasks:
    - name: Update installation status file with Trouter
      when: acs.edition == "Enterprise"
      become: true
      vars:
        trouter_components:
          trouter: "{{ trouter }}"
      ansible.builtin.blockinfile:
        block: "{{ trouter_components | to_nice_yaml(indent=2) }}"
        create: true
        path: "{{ ansible_installation_status_file }}"
        marker_begin: TROUTER_BEGIN
        marker_end: TROUTER_END
        mode: "0755"
  tags:
    - trouter

- name: Shared File Store Role
  hosts: transformers
  gather_facts: false
  pre_tasks:
    - name: Build keystore role argument
      ansible.builtin.set_fact:
        sfs_keystore:
          path: "{{ config_folder }}/pki/{{ inventory_hostname }}.keystore"
          pass: "{{ hostvars.localhost.certs_p12_passphrase }}"
          type: JCEKS
          cert_containers:
            - path: "{{ hostvars.localhost.pki_dir }}/certificates/{{ inventory_hostname }}.p12"
              pass: "{{ hostvars.localhost.certs_p12_passphrase }}"
              add_to_trusted_ca: true
      when:
        - ats_mtls_required
        - ats_mtls_capable
  roles:
    - role: "../roles/sfs"
      ats_keystore: "{{ sfs_keystore | default({}) }}"
      when: acs.edition == "Enterprise"
  post_tasks:
    - name: Update installation status file with SFS
      when: acs.edition == "Enterprise"
      become: true
      vars:
        sfs_components:
          sfs: "{{ sfs }}"
      ansible.builtin.blockinfile:
        block: "{{ sfs_components | to_nice_yaml(indent=2) }}"
        create: true
        path: "{{ ansible_installation_status_file }}"
        marker_begin: SFS_BEGIN
        marker_end: SFS_END
        mode: "0755"
  tags:
    - sfs

- name: Enterprise Search Role
  hosts: search_enterprise
  gather_facts: false
  roles:
    - role: "../roles/search_enterprise"
      when: acs.edition == "Enterprise"
  post_tasks:
    - name: Update installation status file with Enterprise Search
      when: acs.edition == "Enterprise"
      become: true
      vars:
        search_enterprise_components:
          search_enterprise: "{{ search_enterprise }}"
      ansible.builtin.blockinfile:
        block: "{{ search_enterprise_components | to_nice_yaml(indent=2) }}"
        create: true
        path: "{{ ansible_installation_status_file }}"
        marker_begin: SEARCH_ENTERPRISE_BEGIN
        marker_end: SEARCH_ENTERPRISE_END
        mode: "0755"
  tags:
    - search_enterprise

- name: Populate adf app facts
  hosts: acc:adw
  gather_facts: false
  tasks:
    - name: Populate adf app config when identity available
      when: identity_enabled
      ansible.builtin.set_fact:
        adf_app_oauth_configuration:
          authType: OAUTH
          identityHost: "{protocol}//{hostname}{:port}/auth/realms/alfresco"
          oauth2:
            host: "{protocol}//{hostname}{:port}/auth/realms/alfresco"
            clientId: alfresco

- name: Alfresco Control Center Role
  hosts: acc
  gather_facts: false
  vars:
    acs_version_requirement: "{{ acs.version is version('7.4', 'ge') }}"
    adf_default_configuration: {}
  roles:
    - role: "../roles/adf_app"
      when: acs_version_requirement
      adf_app_name: alfresco-control-center
      adf_app_context: /control-center/
      adf_app_port: 8881
      adf_app_src_archive: "{{ downloads.acc_zip_url }}"
      adf_app_src_checksum: "{{ downloads.acc_zip_sha1_checksum_url }}"
      adf_app_version: "{{ acc.version }}"
      adf_app_configuration: >-
        {{
          adf_app_oauth_configuration | default({}) |
          ansible.builtin.combine(adf_default_configuration, recursive=true)
        }}
  post_tasks:
    - name: Update installation status file with ACC
      when: acs_version_requirement
      become: true
      vars:
        acc_components:
          acc: "{{ acc }}"
      ansible.builtin.blockinfile:
        block: "{{ acc_components | to_nice_yaml(indent=2) }}"
        create: true
        path: "{{ ansible_installation_status_file }}"
        marker_begin: ACC_BEGIN
        marker_end: ACC_END
        mode: "0755"
  tags:
    - acc

- name: Alfresco Digital Workspace Role
  hosts: adw
  gather_facts: false
  vars:
    adf_default_configuration:
      plugins:
        processService: false
        microsoftOnline: false
  roles:
    - role: "../roles/adf_app"
      when: acs.edition == "Enterprise"
      adf_app_name: alfresco-digital-workspace
      adf_app_context: /workspace/
      adf_app_port: 8880
      adf_app_src_archive: "{{ downloads.adw_zip_url }}"
      adf_app_src_checksum: >-
        {% if adw.version is version('4.1.0','ge') -%}
        {{ downloads.adw_zip_sha1_checksum_url }}
        {% else -%}
        {{ lookup('url', downloads.adw_zip_sha1_checksum_url, username=nexus_user, password=nexus_password) }}
        {%- endif %}
      adf_app_version: "{{ adw.version }}"
      adf_app_configuration: >-
        {{
          adf_app_oauth_configuration | default({}) |
          ansible.builtin.combine(adf_default_configuration, recursive=true)
        }}
  post_tasks:
    - name: Update installation status file with ADW
      when: acs.edition == "Enterprise"
      become: true
      vars:
        adw_components:
          adw: "{{ adw }}"
      ansible.builtin.blockinfile:
        block: "{{ adw_components | to_nice_yaml(indent=2) }}"
        create: true
        path: "{{ ansible_installation_status_file }}"
        marker_begin: ADW_BEGIN
        marker_end: ADW_END
        mode: "0755"
  tags:
    - adw

- name: Sync Service Role
  hosts: syncservice
  gather_facts: false
  roles:
    - role: "../roles/sync"
      when: acs.edition == "Enterprise"
  post_tasks:
    - name: Update installation status file with Sync
      when: acs.edition == "Enterprise"
      become: true
      vars:
        sync_components:
          sync: "{{ sync }}"
      ansible.builtin.blockinfile:
        block: "{{ sync_components | to_nice_yaml(indent=2) }}"
        create: true
        path: "{{ ansible_installation_status_file }}"
        marker_begin: SYNC_BEGIN
        marker_end: SYNC_END
        mode: "0755"
  tags:
    - sync
