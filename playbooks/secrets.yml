---
- hosts: localhost
  gather_facts: false
  vars:
    base_folder: "{{ playbook_dir }}/.."
    secrets_file: "{{ base_folder }}/vars/secrets.yml"
  tasks:
    - name: Ensure no secrets are still set has group_vars/hostvars
      assert:
        that:
          - hostvars[item].repo_db_password is not defined
          - hostvars[item].sync_db_password is not defined
          - hostvars[item].reposearch_shared_secret is not defined
        quiet: true
      loop: "{{ groups['database'] | default([]) + groups['repository'] | default([]) }}"

    - name: Ensure empty secrets.yml is present
      ansible.builtin.file:
        path: "{{ secrets_file }}"
        state: touch
        modification_time: preserve
        access_time: preserve

    - name: Peek into secrets.yml to discover if is an encrypted ansible-vault file
      ansible.builtin.shell: head -1 {{ secrets_file }} | grep -q \$ANSIBLE_VAULT
      register: peek_encrypted_file_vault
      failed_when: "peek_encrypted_file_vault.rc not in [0,1]"
      changed_when: false

    - name: Handle secret variables generation
      when: peek_encrypted_file_vault.rc != 0
      block:
        - name: Preload secrets as localhost hostvars
          include_vars:
            file: ../vars/secrets.yml

        - name: Calculate generate-secret script mode
          ansible.builtin.set_fact:
            gs_mode: "{{ 'plaintext' if vault_file_initialize is defined else 'encrypt_string' }}"

        - name: Populate secrets.yml with missing secrets
          ansible.builtin.shell: "{{ base_folder }}/scripts/generate-secret.sh -s {{ item }} -m {{ gs_mode }} >> {{ secrets_file }}"
          when: not lookup('vars', item, default=False)
          loop:
            - repo_db_password
            - sync_db_password
            - reposearch_shared_secret
            - activemq_password

        - name: Initialize encrypted file if requested via vault_file_initialize
          ansible.builtin.command: ansible-vault encrypt {{ secrets_file }}
          when: vault_file_initialize is defined

    - name: Load secrets as localhost hostvars
      include_vars:
        file: ../vars/secrets.yml

    - name: Ensure that all mandatory secrets are properly set
      assert:
        that:
          - repo_db_password is defined and repo_db_password | length > 0
          - sync_db_password is defined and sync_db_password | length > 0
          - reposearch_shared_secret is defined and reposearch_shared_secret | length > 0
        msg: "Mandatory secrets must have been already set.
          If you are using encrypted files you need to add them manually before the play."
        quiet: true

    - name: Ensure activemq_password is set when required
      assert:
        that: activemq_password is defined and activemq_password | length > 0
        msg: "activemq_password must have been already set at this point
          If you are using encrypted files you need to add manually the secret before the play."
        quiet: true
      when: groups.external_activemq | default(False)

- hosts: all:!external
  gather_facts: false
  tasks:
    - name: Set tracking/search shared secret
      set_fact:
        reposearch_shared_secret: "{{ hostvars.localhost.reposearch_shared_secret }}"
      when: |
        inventory_hostname in groups.repository | default([]) +  groups.search | default([])
        and hostvars.localhost.reposearch_shared_secret is defined

    - name: Set repo_db_password secret
      set_fact:
        repo_db_password: "{{ hostvars.localhost.repo_db_password }}"
      when: |
        inventory_hostname in groups.repository | default([]) + groups.database | default([])
        and hostvars.localhost.repo_db_password is defined

    - name: Set sync_db_password secret
      set_fact:
        sync_db_password: "{{ hostvars.localhost.sync_db_password }}"
      when: |
        inventory_hostname in groups.syncservice | default([]) + groups.database | default([])
        and hostvars.localhost.sync_db_password is defined

    - name: Set external activemq credentials if present
      set_fact:
        activemq_username: "{{ groups.external_activemq | map('extract', hostvars, ['activemq_username']) | first }}"
        activemq_password: "{{ hostvars.localhost.activemq_password }}"
      when: |
        groups.external_activemq | default(False) and
        hostvars.localhost.activemq_password is defined and
        inventory_hostname in
          groups.syncservice | default([]) +
          groups.repository | default([]) +
          groups.transformers | default([])

    - name: Fallback to default insecure credentials without external activemq
      set_fact:
        activemq_username: admin
        activemq_password: admin
      when: not (groups.external_activemq | default(False))
