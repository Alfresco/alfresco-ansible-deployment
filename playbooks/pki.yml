---
- name: Prepare CA signing infrastructuren
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    actual_pki_dir: "{{ pki_dir | default('../configuration_files/pki') }}"
    actual_ca_cn: "{{ ca_cn | default('Hyland - Alfresco signing CA') }}"
  tasks:
    - name: Check PKCS12 and CA signing key are given a password
      ansible.builtin.assert:
        that:
          - p12_passphrase
          - secret_ca_passphrase
        fail_msg: |
          this playbook do not generate passwords. You must generate them and
          store them securely, and pass them as varaiables for the playbook to
          generate private keys, certificates and containers.
          expected varaibles are p12_passphrase, secret_ca_passphrase and
          key_password
        quiet: true

    - name: Prepare PKI directory structure
      ansible.builtin.file:
        path: "{{ actual_pki_dir }}/{{ item.name }}"
        state: directory
        mode: "{{ item.mode | default(omit) }}"
      loop:
        - name: ca
        - name: certificates
        - name: private
          mode: "0700"

    - name: Check for provided CA signing certificate
      ansible.builtin.stat:
        path: "{{ ca_file }}"
      vars:
        ca_file: >-
          {{
            lookup('ansible.builtin.first_found',
             lookup('ansible.builtin.fileglob', actual_pki_dir + '/ca/*.crt', wantlist=True) +
             lookup('ansible.builtin.fileglob', actual_pki_dir + '/ca/*.pem', wantlist=True),
            errors='ignore')
          }}
      register: ca_cert_stat

    - name: Check for provided CA signing key
      ansible.builtin.stat:
        path: "{{ ca_file }}"
      vars:
        ca_file: >-
          {{
            lookup('ansible.builtin.first_found',
             [ actual_pki_dir + '/private/ca.key' ] +
             lookup('ansible.builtin.fileglob', actual_pki_dir + '/ca/*.key', wantlist=True),
            errors='ignore')
          }}
      register: ca_key_stat

    - name: Validate provided CA certificate and key
      when:
        - ca_cert_stat.stat.exists
        - ca_key_stat.stat.exists
      block:
        - name: Read CA signing certificate
          community.crypto.x509_certificate_info:
            path: "{{ ca_cert_stat.stat.path }}"
            valid_at:
              tomorrow: +1d
          register: ca_cert_valid

        - name: Read CA signing key
          community.crypto.openssl_privatekey_info:
            path: "{{ ca_key_stat.stat.path }}"
            passphrase: "{{ secret_ca_passphrase }}"
          register: ca_key_valid

        - name: Check PKCS12 and CA signing key are given a password
          ansible.builtin.assert:
            that:
              - ca_cert_valid.valid_at.tomorrow
              - ca_key_valid.can_parse_key
            fail_msg: |
              We could not parse your provided CA! Please check the files
              {{ ca_cert_stat.stat.path }} & {{ ca_key_stat.stat.path }}
              and their passphrases.

        - name: Set CA variables
          ansible.builtin.set_fact:
            ca_cert_path: "{{ ca_cert_stat.stat.path }}"
            ca_key_path: "{{ ca_key_stat.stat.path }}"

    - name: Generate our own CA
      vars:
        ownca_key_path: "{{ actual_pki_dir }}/private/alfresco_platform_CA.key"
        ownca_cert_path: "{{ actual_pki_dir }}/ca/alfresco_platform_CA.crt"
      when: not (ca_cert_stat.stat.exists and ca_key_stat.stat.exists)
      block:
        - name: Create private key with password protection
          community.crypto.openssl_privatekey:
            backup: true
            size: "{{ ca_key_size | default(omit) }}"
            type: "{{ ca_key_type | default(omit) }}"
            path: "{{ ownca_key_path }}"
            passphrase: "{{ secret_ca_passphrase }}"
            cipher: auto

        - name: Create certificate signing request (CSR) for CA certificate
          community.crypto.openssl_csr_pipe:
            privatekey_path: "{{ ownca_key_path }}"
            privatekey_passphrase: "{{ secret_ca_passphrase }}"
            common_name: "{{ actual_ca_cn }}"
            use_common_name_for_san: false
            basic_constraints:
              - 'CA:TRUE'
            basic_constraints_critical: true
            key_usage:
              - keyCertSign
            key_usage_critical: true
          register: ca_csr
          changed_when: false

        - name: Create {{ actual_ca_cn }} certificate
          community.crypto.x509_certificate:
            path: "{{ ownca_cert_path }}"
            csr_content: "{{ ca_csr.csr }}"
            privatekey_path: "{{ ownca_key_path }}"
            privatekey_passphrase: "{{ secret_ca_passphrase }}"
            selfsigned_not_after: "{{ ca_days_valid_for | default(omit) }}"
            provider: selfsigned

        - name: Set CA variables
          ansible.builtin.set_fact:
            ca_cert_path: "{{ ownca_cert_path }}"
            ca_key_path: "{{ ownca_key_path }}"

    - name: Set PKI variables
      ansible.builtin.set_fact:
        pki_dir: "{{ actual_pki_dir }}"

- name: Request and sign certificates for hosts
  hosts: all:!external
  gather_facts: true
  tasks:
    - name: Check for provided host's PKCS12 container
      ansible.builtin.stat:
        path: "{{ hostvars.localhost.pki_dir }}/certificates/{{ inventory_hostname }}.p12"
      register: host_p12
      delegate_to: localhost

    - name: Request and sign certificates as none was given
      when: not host_p12.stat.exists
      block:
        - name: Create host's PKI directory
          become: true
          ansible.builtin.file:
            path: "{{ item.name }}"
            state: directory
            mode: "{{ item.mode | default(omit) }}"
          loop:
            - name: /etc/pki
            - name: /etc/pki/private
              mode: "0700"

        - name: Install PKI required packages
          become: true
          ansible.builtin.package:
            name: >-
              {{ 'python2-cryptography' if ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7' else 'python3-cryptography' }}
            update_cache: true
            state: present

        - name: Create private key for new certificate
          vars:
            key_type: "{{ cert_key_type | default('RSA') }}"
          no_log: true
          become: true
          community.crypto.openssl_privatekey:
            path: /etc/pki/private/{{ inventory_hostname | basename }}_{{ key_type }}.key
            mode: 0600
            size: "{{ cert_key_size | default(omit) }}"
            type: "{{ key_type }}"
            return_content: true
          register: srvkey

        - name: Create certificate signing request (CSR) for new certificate
          vars:
            alt_names:
              - DNS:{{ inventory_hostname }}
              - DNS:{{ ansible_hostname }}
          no_log: true
          community.crypto.openssl_csr_pipe:
            privatekey_content: "{{ srvkey.privatekey }}"
            common_name: "{{ ansible_fqdn | default(inventory_hostname) }}"
            basic_constraints:
              - 'CA:FALSE'
            key_usage:
              - nonRepudiation
              - digitalSignature
              - keyEncipherment
            extended_key_usage:
              - serverAuth
              - clientAuth
            subject_alt_name: "{{ alt_names | unique }}"
          register: csr
          changed_when: false

        - name: Create localhost PKI directory
          ansible.builtin.file:
            path: "{{ hostvars.localhost.pki_dir }}/certificates/{{ inventory_hostname | dirname }}"
            state: directory
            mode: "0750"
          delegate_to: localhost

        - name: Sign certificate with our CA
          no_log: true
          community.crypto.x509_certificate:
            csr_content: "{{ csr.csr }}"
            provider: ownca
            ownca_path: "{{ hostvars.localhost.ca_cert_path }}"
            ownca_privatekey_path: "{{ hostvars.localhost.ca_key_path }}"
            ownca_privatekey_passphrase: "{{ secret_ca_passphrase }}"
            ownca_not_after: "{{ cert_days_valid_for | default(omit) }}"
            ownca_not_before: "+0s"
            path: "{{ hostvars.localhost.pki_dir }}/certificates/{{ inventory_hostname }}.crt"
          delegate_to: localhost

        - name: Generate PKCS12 keystores
          community.crypto.openssl_pkcs12:
            action: export
            path: "{{ hostvars.localhost.pki_dir }}/certificates/{{ inventory_hostname }}.p12"
            passphrase: "{{ p12_passphrase }}"
            friendly_name: "{{ inventory_hostname }}"
            privatekey_content: "{{ srvkey.privatekey }}"
            certificate_path: "{{ hostvars.localhost.pki_dir }}/certificates/{{ inventory_hostname }}.crt"
            ca_certificates: "{{ hostvars.localhost.ca_cert_path }}"
          delegate_to: localhost
