---
import:
  - source: Alfresco/alfresco-build-tools:.travis.pre-commit.yml@v1.1.9

os: linux
dist: xenial
language: python
python:
  - "3.9.0"

services:
  - docker

branches:
  except:
    - OPSEXP-1222-gha
  only:
    - master
    - contribs
    - /feature.*/
    - /fix.*/
    - /(?i:OPSEXP)-.*/
    - /^dependabot\/.*$/

env:
  global:
    - BRANCH_NAME="${TRAVIS_BRANCH}"
    - BUILD_NUMBER="${TRAVIS_BUILD_NUMBER}"
    - MOLECULE_NO_LOG=false
    - AWS_REGION=eu-west-1
    - MOLECULE_IT_AWS_VPC_SUBNET_ID=subnet-6bdd4223
    - DTAS_VERSION=v1.1.1

before_script:
  - |
    if [ -n "$MOLECULE_ROLE_IMAGE" ] || [ -n "$MOLECULE_IT_SCENARIO" ]; then
      travis_retry ansible-galaxy install -r requirements.yml
    fi

script:
  - ./tests/molecule_it/script.sh verify

after_script:
  - ./tests/molecule_it/script.sh destroy

cache:
  directories:
  - $HOME/.ansible/collections

stages:
  - name: lint
  - name: Roles tests
  - name: Integration tests
  - name: Release Stage
    if: branch = master AND commit_message =~ /\[release\]/

jobs:
  include:

    - stage: Roles tests
      name: ActiveMQ tests on Centos 7
      env:
        - "MOLECULE_ROLE_IMAGE=centos:7"
      script:
        - cd roles/activemq/ && molecule test

    - stage: Roles tests
      name: ActiveMQ tests on Ubuntu 20.04
      env:
        - "MOLECULE_ROLE_IMAGE=ubuntu:20.04"
      script:
        - cd roles/activemq/ && molecule test

    - stage: Roles tests
      name: ADW tests on Centos 7
      env:
        - "MOLECULE_ROLE_IMAGE=centos:7"
      script:
        - cd roles/adw/ && molecule test

    - stage: Roles tests
      name: ADW tests on Ubuntu 20.04
      env:
        - "MOLECULE_ROLE_IMAGE=ubuntu:20.04"
      script:
        - cd roles/adw/ && molecule test

    - stage: Roles tests
      name: Common tests on Ubuntu 20.04
      env:
        - "MOLECULE_ROLE_IMAGE=ubuntu:20.04"
      script:
        - cd roles/common/ && molecule test

    - stage: Roles tests
      name: Java tests on Ubuntu 20.04
      env:
        - "MOLECULE_ROLE_IMAGE=ubuntu:20.04"
      script:
        - cd roles/java/ && molecule test

    - stage: Roles tests
      name: Nginx tests on Centos 7
      env:
        - "MOLECULE_ROLE_IMAGE=centos:7"
      script:
        - cd roles/nginx/ && molecule test

    - stage: Roles tests
      name: Nginx tests on Ubuntu 20.04
      env:
        - "MOLECULE_ROLE_IMAGE=ubuntu:20.04"
      script:
        - cd roles/nginx/ && molecule test

    - stage: Roles tests
      name: Repository tests on Centos 7
      env:
        - "MOLECULE_ROLE_IMAGE=centos:7"
      script:
        - cd roles/repository && travis_retry molecule test

    - stage: Roles tests
      name: Repository tests on Ubuntu 20.04
      env:
        - "MOLECULE_ROLE_IMAGE=ubuntu:20.04"
      script:
        - cd roles/repository && molecule test

    - stage: Roles tests
      name: Search tests on Centos 7
      env:
        - "MOLECULE_ROLE_IMAGE=centos:7"
      script:
        - cd roles/search && molecule test

    - stage: Roles tests
      name: Search tests on Ubuntu 20.04
      env:
        - "MOLECULE_ROLE_IMAGE=ubuntu:20.04"
      script:
        - cd roles/search && molecule test

    - stage: Roles tests
      name: SFS tests on Centos 7
      env:
        - "MOLECULE_ROLE_IMAGE=centos:7"
      script:
        - cd roles/sfs/ && molecule test

    - stage: Roles tests
      name: SFS tests on Ubuntu 20.04
      env:
        - "MOLECULE_ROLE_IMAGE=ubuntu:20.04"
      script:
        - cd roles/sfs/ && molecule test

    - stage: Roles tests
      name: Sync tests on Centos 7
      env:
        - "MOLECULE_ROLE_IMAGE=centos:7"
      script:
        - cd roles/sync && travis_retry molecule test

    - stage: Roles tests
      name: Sync tests on Ubuntu 20.04
      env:
        - "MOLECULE_ROLE_IMAGE=ubuntu:20.04"
      script:
        - cd roles/sync && molecule test

    - stage: Roles tests
      name: Tomcat tests on Ubuntu 20.04
      env:
        - "MOLECULE_ROLE_IMAGE=ubuntu:20.04"
      script:
        - cd roles/tomcat/ && molecule test

    - stage: Roles tests
      name: Transformers tests on Centos 7
      env:
        - "MOLECULE_ROLE_IMAGE=centos:7"
      script:
        - cd roles/transformers && molecule test

    - stage: Roles tests
      name: Transformers tests on Ubuntu 20.04
      env:
        - "MOLECULE_ROLE_IMAGE=ubuntu:20.04"
      script:
        - cd roles/transformers && molecule test

    - stage: Roles tests
      name: Trouter tests on Centos 7
      env:
        - "MOLECULE_ROLE_IMAGE=centos:7"
      script:
        - cd roles/trouter && molecule test

    - stage: Roles tests
      name: Trouter tests on Ubuntu 20.04
      env:
        - "MOLECULE_ROLE_IMAGE=ubuntu:20.04"
      script:
        - cd roles/trouter && molecule test

    - stage: Integration tests
      name: Molecule ACS 6.2.2 Enterprise on Centos 7
      if: branch = master
      env:
        MOLECULE_IT_SCENARIO=default
        MOLECULE_IT_CONFIG=vars-centos7.yml

    - stage: Integration tests
      name: Molecule ACS 7.1.1 Enterprise on RHEL7
      if: branch = master
      env:
        MOLECULE_IT_SCENARIO=default
        MOLECULE_IT_CONFIG=vars-rhel7.yml

    - stage: Integration tests
      name: Molecule ACS 7.1.1 Enterprise on RHEL8
      env:
        MOLECULE_IT_SCENARIO=default
        MOLECULE_IT_CONFIG=vars-rhel8.yml

    - stage: Integration tests
      name: Molecule ACS 7.1.1 Enterprise on Ubuntu 20.04
      env:
        MOLECULE_IT_SCENARIO=default
        MOLECULE_IT_CONFIG=vars-ubuntu20.yml

    - stage: Integration tests
      name: Molecule ACS 7.1.1 Enterprise on Ubuntu 18.04
      if: branch = master
      env:
        MOLECULE_IT_SCENARIO=default
        MOLECULE_IT_CONFIG=vars-ubuntu18.yml

    - stage: Integration tests
      name: Molecule ACS 7.1.1 Community on RHEL8
      env: #pragma: allowlist secret
        NEXUS_USERNAME=
        NEXUS_PASSWORD=
        MOLECULE_IT_SCENARIO=default
        MOLECULE_IT_CONFIG=vars-rhel8-community.yml

    - stage: Integration tests
      name: Molecule ACS 7.1.1 Enterprise on multiple RHEL8
      if: branch = master
      env:
        MOLECULE_IT_SCENARIO=multimachine
        MOLECULE_IT_CONFIG=vars.yml

    - stage: Release Stage
      name: Release
      script:
        - scripts/generate-zip.sh
        # Travis CI runner work on DETACHED HEAD, so we need to checkout the branch
        - git checkout -B "${TRAVIS_BRANCH}"
        - git config --local user.email "alfresco-build@alfresco.com"
        - export VERSION=`cat VERSION`
        - echo "Tagging repository with v$VERSION..."
        - export GIT_TAG="v$VERSION"
        - git tag $GIT_TAG -a -m "Generated tag from TravisCI for build $TRAVIS_BUILD_NUMBER"
        - git push https://$GITHUB_TOKEN@github.com/Alfresco/alfresco-ansible-deployment $GIT_TAG
        - git tag -d latest
        - git tag -a -m "current latest -> $GIT_TAG" -f latest ${GIT_TAG}^{}
        - for ref in ':refs/tags/latest' 'latest'; do git push https://$GITHUB_TOKEN@github.com/Alfresco/alfresco-ansible-deployment $ref; done
        - curl -F "r=releases" -F "g=org.alfresco" -F "a=alfresco-ansible-deployment" -F "v=${VERSION}" -F "p=zip" -F "file=@dist/alfresco-ansible-deployment-${VERSION}.zip" -u "$NEXUS_USERNAME:$NEXUS_PASSWORD" https://artifacts.alfresco.com/nexus/service/local/artifact/maven/content
      deploy:
        provider: s3
        access_key_id: "${STAGING_AWS_ACCESS_KEY}"
        secret_access_key: "${STAGING_AWS_SECRET_KEY}"
        bucket: "${S3_STAGING_BUCKET}"
        region: "eu-west-1"
        cleanup: false
        local_dir: dist
        glob: "*.zip"
        upload-dir: "enterprise/alfresco-ansible-deployment"
