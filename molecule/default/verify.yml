---
- name: Verify
  hosts: localhost
  gather_facts: false
  vars:
    project_dir: "{{ lookup('ansible.builtin.env', 'MOLECULE_PROJECT_DIRECTORY') }}"
    dtas_dir: "{{ lookup('ansible.builtin.env', 'MOLECULE_PROJECT_DIRECTORY') }}/dtas"
    test_config_file: "{{ lookup('ansible.builtin.env', 'MOLECULE_PROJECT_DIRECTORY') }}/{{ lookup('ansible.builtin.env', 'MOLECULE_IT_TEST_CONFIG') | default('tests/test-config.json', True) }}"
  tasks:
    - name: Detect ec2 hostname
      ansible.builtin.include_tasks: "tasks/detect_ec2_node_hostname.yml"

    - name: Stat to see if dtas_dir exists
      ansible.builtin.stat:
        path: "{{ dtas_dir }}"
      register: dtas_dir_stat

    - name: Run tests
      when: dtas_dir_stat.stat.exists
      block:
        - name: Install pytest requirements
          pip:
            chdir: "{{ dtas_dir }}"
            requirements: requirements.txt

        - name: Configure {{ node_hostname }} as target host for tests in {{ test_config_file }}
          ansible.builtin.replace:
            path: "{{ test_config_file }}"
            regexp: 'TEST_URL'
            replace: "https://{{ node_hostname }}"

        - name: Run pytest
          vars:
              selfsigned_cert_path: "{{ project_dir }}/configuration_files/ssl_certificates/{{ node_hostname }}.crt"
          ansible.builtin.shell:
            chdir: "{{ dtas_dir }}"
            cmd: |
              export REQUESTS_CA_BUNDLE={{ selfsigned_cert_path }}
              pytest --tb=line --color=no --configuration {{ test_config_file }} tests/ -s
      rescue:
        - name: Print multiline pytest stdout as best as we can
          debug:
            msg: "{{ ansible_failed_result.stdout_lines }}"
        - name: Explicit failure after printing failure debug
          fail: msg="Aborting due to pytest failure"

- name: Verify search enterprise
  hosts: search_enterprise
  gather_facts: false
  vars:
    job_name: elasticsearch-connector.service
  tasks:
    - name: Populate service facts
      ansible.builtin.service_facts:

    - name: Check that Elasticsearch Connector service is up and running
      ansible.builtin.assert:
        that:
          - ansible_facts.services[job_name] is defined
          - ansible_facts.services[job_name].state == 'running'

    - name: "Check that {{ job_name }} is really up and running"
      become: true
      ansible.builtin.shell: journalctl -u {{ job_name }}
      register: error_log
      retries: 6
      delay: 10
      until: error_log.stdout | regex_search('Started LiveIndexingApp')

- name: Verify Reindex before first run
  hosts: search_enterprise[0]
  gather_facts: false
  vars:
    job_name: elasticsearch-connector-reindex.service
  tasks:
    - name: Check that {{ job_name }} is defined and not running
      ansible.builtin.assert:
        that:
          - ansible_facts.services[job_name] is defined
          - ansible_facts.services[job_name].state == 'inactive'

- name: Run the Elasticsearch Connector Reindex
  import_playbook: ../../playbooks/search-enterprise-reindex.yml

- name: Verify Reindex after first run
  hosts: search_enterprise[0]
  gather_facts: false
  vars:
    job_name: elasticsearch-connector-reindex.service
  tasks:
    - name: "Check that {{ job_name }} is really up and running"
      become: true
      ansible.builtin.shell: journalctl -u {{ job_name }}
      register: error_log
      retries: 6
      delay: 10
      until: error_log.stdout | regex_search('reindexByIds.*COMPLETED.*')

- name: Verify adw plugins state
  hosts: adw
  gather_facts: true
  tasks:
    - name: Retrieve contents of app.config.json
      become: true
      vars:
        adf_apps: alfresco-digital-workspace
        nginx_html_path_redhat: "/usr/share/nginx/html/{{ adf_apps }}/app.config.json"
        nginx_html_path_ubuntu: "/var/www/html/{{ adf_apps }}/app.config.json"
      ansible.builtin.slurp:
        src: "{{ nginx_html_path_redhat if ansible_os_family == 'RedHat' else nginx_html_path_ubuntu }}"
      register: slurp_app_config_json
      when: acs.edition == "Enterprise"

    - name: Assert that app.config.json contains expected values
      vars:
        app_config_json: "{{ slurp_app_config_json['content'] | b64decode | from_json }}"
      ansible.builtin.assert:
        quiet: true
        that:
          - app_config_json.plugins.processService == false
          - app_config_json.plugins.microsoftOnline == false
        fail_msg: "not expected {{ app_config_json }}"
      when: acs.edition == "Enterprise"
