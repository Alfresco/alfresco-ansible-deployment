---
- name: Default prepare
  import_playbook: ../default/prepare.yml

- name: Prepare localhost
  hosts: localhost
  ansible.builtin.gather_facts: no
  vars:
    project_dir: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}"
    dtas_dir: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/dtas"
  tasks:
    - name: Creating cluster contentstore
      when: molecule_yml.platforms | selectattr('name', 'in', groups.repository) | length > 1
      block:
        - name: get EC2 instance info
          amazon.aws.ec2_instance_info:
            filters:
              "tag:Name": molecule_{{ lookup('env', 'MOLECULE_IT_PLATFORM') }}_repo_{{ lookup('env', 'BRANCH_NAME') }}_{{ lookup('env', 'BUILD_NUMBER') }}
          register: molecule_ec2
    
        - name: Create Shared contentstore
          community.aws.efs:
            state: present
            name: molecule-{{ lookup('env', 'BUILD_NUMBER') }}
            targets:
              - subnet_id: "{{ molecule_yml.platforms | selectattr('name', 'in', groups.repository) | map(attribute='vpc_subnet_id') | first }}"
                security_groups: "{{ molecule_ec2.instances | json_query('[].security_groups[].group_id') | unique }}"
            tags:
              Name: molecule-{{ lookup('env', 'MOLECULE_SCENARIO_NAME') }}-{{ lookup('env', 'BRANCH_NAME') }}-{{ lookup('env', 'BUILD_NUMBER') }}
              Owner: Ops Readiness Team
              Department: Engineering
              Production: false
          loop: 
            - "{{ molecule_yml.platforms | selectattr('name', 'in', groups.repository) | first }}"
          register: contentstore

        - name: Generate repo host_vars files
          blockinfile:
            state: present
            block: |
              cs_storage:
                type: nfs
                device: {{ contentstore.results[0].efs.filesystem_address }}{{ lookup('env', 'BRANCH_NAME') }}-{{ lookup('env', 'BUILD_NUMBER') }}
                options: _netdev,noatime,nodiratime,tcp,soft,intr
            path: host_vars/{{ item }}.yml
          loop: "{{ molecule_yml.platforms | selectattr('name', 'in', groups.repository) | map(attribute='name') }}"

        - name: Prepare contentstore FS
          when: molecule_yml.platforms | selectattr('name', 'in', groups.repository) | length > 1
          become: yes
          delegate_to: "{{ groups.repository | first }}"
          block:
            - name: install required packages
              package:
                state: present
                name: nfs-utils
            # Wait up to ~10 min for DNS propagation
            - name: check for DNS propagation
              ansible.builtin.command:
                cmd: getent hosts {{ contentstore.results[0].efs.filesystem_address.split(':/')[0] }}
              until: resolvcheck.rc == 0
              register: resolvcheck
              retries: 9
              delay: 60
            - name: mount the EFS volume
              ansible.posix.mount:
                path: /mnt
                src: "{{ hostvars.localhost.contentstore.results[0].efs.filesystem_address }}"
                fstype: nfs
                state: mounted
            - name: create contentstore root folder
              file:
                state: directory
                mode: 0777
                path: /mnt/{{ lookup('env', 'BRANCH_NAME') }}-{{ lookup('env', 'BUILD_NUMBER') }}
            - name: umount the EFS volume
              ansible.posix.mount:
                path: /mnt
                src: "{{ hostvars.localhost.contentstore.results[0].efs.filesystem_address }}"
                fstype: nfs
                state: absent

- name: Prepare external activemq
  hosts: localhost
  ansible.builtin.gather_facts: no
  vars:
    broker_name: molecule-{{ lookup('env', 'BUILD_NUMBER') }}
  tasks:
    - name: Lookup existing ec2 group
      amazon.aws.ec2_group_info:
        filters:
          group-name: molecule-{{ lookup('env', 'MOLECULE_IT_ID') }}
      register: ec2_groups_lookup

    - name: Load secrets as localhost hostvars
      include_vars:
        file: ../../vars/secrets.yml

    - name: Create mq broker
      ansible.builtin.command: |
        aws mq create-broker --broker-name {{ broker_name }} \
          --deployment-mode SINGLE_INSTANCE \
          --engine-type ACTIVEMQ \
          --host-instance-type mq.t3.micro \
          --engine-version 5.15.15 \
          --users Password={{ activemq_password }},Username=alfresco \
          --security-groups {{ ec2_groups_lookup.security_groups[0].group_id }} \
          --publicly-accessible \
          --no-auto-minor-version-upgrade

    - name: Wait for creation
      ansible.builtin.command: |
        aws mq describe-broker --broker-id {{ broker_name }}
      register: describe_broker_output
      until: ((describe_broker_output.stdout | from_json).BrokerState) == 'RUNNING'
      retries: 20
      delay: 60

    - name: Grab activemq hostname
      set_fact:
        activemq_hostname: "{{ (describe_broker_output.stdout | from_json).BrokerInstances[0].Endpoints[0] | urlsplit('hostname') }}"

    - name: Configure activemq hostname as {{ activemq_hostname }}
      ansible.builtin.replace:
        path: hosts.yml
        regexp: 'external_activemq_hostname'
        replace: "{{ activemq_hostname }}"