---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  vars:
    ssh_user: centos
    ssh_port: 22
    security_group_name: "molecule_{{ lookup('env', 'TRAVIS_BRANCH') }}_{{ lookup('env', 'TRAVIS_BUILD_NUMBER') }}_multi"
    security_group_description: Security group for testing Molecule Multi
    keypair_name: "molecule_{{ lookup('env', 'TRAVIS_BRANCH') }}_{{ lookup('env', 'TRAVIS_BUILD_NUMBER') }}_multi"
    keypair_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"

  tasks:
    - name: Use uri to ipify to get external ip
      uri:
        url: https://api.ipify.org
        method: GET
        return_content: yes
      register: ipv4_address

#    - name: Get local ip
#      shell: "hostname -I | awk '{print $1}'"
#      register: ipv4_local

    - name: Create security group
      ec2_group:
        name: "{{ security_group_name }}"
        description: "{{ security_group_name }}"
        rules:
        - proto: all
          cidr_ip: "{{ ipv4_address['content'] }}/32"
      register: sec_group

    - name: Test for presence of local keypair
      stat:
        path: "{{ keypair_path }}"
      register: keypair_local

    - name: Delete remote keypair
      ec2_key:
        name: "{{ keypair_name }}"
        state: absent
      when: not keypair_local.stat.exists

    - name: Create keypair
      ec2_key:
        name: "{{ keypair_name }}"
      register: keypair

    - name: Persist the keypair # noqa 503
      copy:
        dest: "{{ keypair_path }}"
        content: "{{ keypair.key.private_key }}"
        mode: 0600
      when: keypair.changed

    - set_fact:
        platforms_fact: "{{ platforms_fact|default([]) +
                  [{'name': item.name,
                    'count': range(1, item.count + 1)|list,
                    'spot_price': item.spot_price,
                    'image': item.image,
                    'instance_type': item.instance_type,
                    'region': item.region,
                    'vpc_subnet_id': item.vpc_subnet_id
                    }] }}"
      loop: "{{ molecule_yml.platforms }}"

    - name: Create molecule instance(s)
      ec2:
        key_name: "{{ keypair_name }}"
        user_data: |
          #!/bin/bash
          sudo setsebool -P httpd_can_network_connect 1
          sudo getsebool httpd_can_network_connect
        image: "{{ item.0.image }}"
        instance_type: "{{ item.0.instance_type }}"
        instance_initiated_shutdown_behavior: terminate
        vpc_subnet_id: "{{ item.0.vpc_subnet_id }}"
        group: "{{ security_group_name }}"
        instance_tags:
          Name: "molecule_{{ lookup('env', 'TRAVIS_BRANCH') }}_{{ lookup('env', 'TRAVIS_BUILD_NUMBER') }}"
          instance: "{{ item.0.name }}_{{ item.1 }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 8
            delete_on_termination: true
        wait: true
        assign_public_ip: true
        exact_count: 1
        count_tag:
          instance: "{{ item.0.name }}"
      register: server
      loop: "{{ platforms_fact|subelements('count') }}"
      async: 7200
      poll: 0

    # - debug: "var=server"

    - name: Wait for instance(s) creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: ec2_jobs
      until: ec2_jobs.finished
      retries: 300
      with_items: "{{ server.results }}"

    - name: Update security group
      ec2_group:
        name: "{{ security_group_name }}"
        description: "{{ security_group_name }}"
        rules:
        - proto: all
          cidr_ip: "{{ ipv4_address['content'] }}/32"
        - proto: all
          cidr_ip: "{{ ansible_eth0.ipv4.address }}/32"          
        - proto: all
          group_name: "{{ security_group_name }}"
      with_items: "{{ ec2_jobs.results }}"

    - name: Populate instance config dict # noqa 503
      set_fact:
        instance_conf_dict: {
          'instance': "{{ item.instances[0].tags.instance }}",
          'address': "{{ item.instances[0].public_ip }}",
          'user': "{{ ssh_user }}",
          'port': "{{ ssh_port }}",
          'identity_file': "{{ keypair_path }}",
          'instance_ids': "{{ item.instance_ids }}" }
      with_items: "{{ ec2_jobs.results }}"
      register: instance_config_dict
      when: server.changed | bool

    - name: Convert instance config dict to a list # noqa 503
      set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      when: server.changed | bool

    - name: Dump instance config # noqa 503
      copy:
        content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"
      when: server.changed | bool

    - name: Wait for SSH
      wait_for:
        port: "{{ ssh_port }}"
        host: "{{ item.address }}"
        search_regex: SSH
        delay: 10
        timeout: 320
      with_items: "{{ lookup('file', molecule_instance_config) | molecule_from_yaml }}"

    - name: Wait for boot process to finish
      pause:
        minutes: 2
