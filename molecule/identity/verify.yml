---
- name: Verify
  hosts: all
  gather_facts: false
  vars:
    adf_apps:
      - alfresco-digital-workspace
      - alfresco-control-center
  tasks:
    - name: Populate services facts
      ansible.builtin.service_facts:

    - name: Check services up
      ansible.builtin.assert:
        quiet: true
        that:
          - ansible_facts.services['alfresco-content.service'].state == "running"
          - ansible_facts.services['keycloak.service'].state == "running"
          - ansible_facts.services['nginx.service'].state == "running"

    - name: Retrieve contents of alfresco-global.properties
      become: true
      ansible.builtin.slurp:
        src: /etc/opt/alfresco/content-services/classpath/alfresco-global.properties
      register: slurp_global_properties

    - name: Check alfresco-global.properties contains expected identity properties
      vars:
        global_properties_content: "{{ slurp_global_properties['content'] | b64decode }}"
        expected_auth_chain: "authentication.chain=identity-service1:identity-service,alfrescoNtlm1:alfrescoNtlm"
        expected_service_resource: "identity-service.resource=alfresco"
        expected_service_credentials: "identity-service.credentials.secret="
        expected_auth_url_regex: 'identity-service\.auth-server-url=http:\/\/.*\/'
      ansible.builtin.assert:
        quiet: true
        that:
          - "expected_auth_chain in global_properties_content"
          - "expected_service_resource in global_properties_content"
          - "expected_service_credentials in global_properties_content"
          - "global_properties_content | regex_search(expected_auth_url_regex)"
        fail_msg: "{{ global_properties_content }}"

    - name: Fetch realm
      community.general.keycloak_realm_info:
        auth_keycloak_url: "http://localhost:8082/auth" # pragma: allowlist secret
        realm: alfresco
      register: result_realm_info

    - name: Assert that realm is consistent
      ansible.builtin.assert:
        quiet: true
        that:
          - result_realm_info.realm_info['realm'] == "alfresco"
          - result_realm_info.realm_info['account-service'] == "http://localhost/auth/realms/alfresco/account"
          - result_realm_info.realm_info['public_key'] is defined
        fail_msg: "Realm contents doesn't meet expectations: {{ result_realm_info }}"

    - name: Retrieve contents of app.config.json
      become: true
      ansible.builtin.slurp:
        src: "/usr/share/nginx/html/{{ item }}/app.config.json"
      loop: "{{ adf_apps }}"
      register: slurp_app_config_json

    - name: Assert that app.config.json contains expected values
      vars:
        app_config_json: "{{ slurp_app_config_json['results'][item_index]['content'] | b64decode | from_json }}"
      ansible.builtin.assert:
        quiet: true
        that:
          - app_config_json.authType == 'OAUTH'
          - app_config_json.oauth2.clientId == 'alfresco'
          - app_config_json.oauth2.host == '{protocol}//{hostname}{:port}/auth/realms/alfresco'
          - app_config_json.oauth2.scope == 'openid profile email'
        fail_msg: "not expected {{ app_config_json }}"
      loop: "{{ range(0, adf_apps | length) | list }}"
      loop_control:
        loop_var: item_index
        label: "{{ adf_apps[item_index] }}"

    - name: Inspect share-config-custom.xml
      become: true
      community.general.xml:
        path: /etc/opt/alfresco/content-services/classpath/alfresco/web-extension/share-config-custom.xml
        xpath: /alfresco-config/config[@condition='AIMS']/{{ item }}
        content: text
      register: share_config_xml
      loop:
        - enabled
        - realm
        - resource
        - secret
        - authServerUrl
        - publicClient

    - name: Assert expected config values
      ansible.builtin.assert:
        quiet: true
        that:
          - "share_config_xml['results'][0]['matches'][0]['enabled'] == 'true'"
          - "share_config_xml['results'][1]['matches'][0]['realm'] == 'alfresco'"
          - "share_config_xml['results'][2]['matches'][0]['resource'] == 'alfresco'"
          - "not share_config_xml['results'][3]['matches'][0]['secret']"
          - "share_config_xml['results'][4]['matches'][0]['authServerUrl'] == 'http://localhost/auth'"
          - "share_config_xml['results'][5]['matches'][0]['publicClient'] == 'true'"

    - name: Retrieve share login page
      ansible.builtin.uri:
        url: "http://localhost/share"
        return_content: true
      register: this

    - name: Assert keycloak login redirect
      vars:
        expected_url_prefix: http://localhost/auth/realms/alfresco/protocol/openid-connect/auth?response_type=code&client_id=alfresco&scope=openid
        expected_login_submit: http://localhost/auth/realms/alfresco/login-actions/authenticate
      ansible.builtin.assert:
        quiet: true
        that:
          - this.redirected
          - expected_url_prefix in this.url
          - expected_login_submit in this.content
